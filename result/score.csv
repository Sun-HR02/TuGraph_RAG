id,score,correct_answer,our_answer
VAL-1,0.9903736786032498,三个级别（0，1，2）。,三个级别（0，1，2，3）。
VAL-2,0.7320629745705933,value大于10000时。,当值大于10000时会触发危急颜色模式。
VAL-3,0.7901220093424823,`IsReal()` 用来查询是否是 `FLOAT` 或 `DOUBLE` 类型的数据。,是的，`FieldData` 类中的函数 `IsReal()` 是用来查询数据是否为实数类型。
VAL-4,0.9999934496302467,200,200
VAL-5,0.4668446555015493,是的,边关联的两个点的字段不一定是点的主键。尽管在边的 upsert 操作中需要指定起点和终点的主键字段值，但这并不意味着这些字段必须是主键。
VAL-6,0.7942693496595955,Deletes current edge. The iterator will point to the next out edge if there is any.,删除当前边，并将迭代器指向下一个出边（如果存在）。
VAL-7,0.7332165465525181,"单机模式下，调整配置文件src/server/lgraph_standalone.json，其中verbose配置项控制日志等级，verbose可以设置为0,1,2，对应日志等级可以参考src/server/lgraph_server.cpp中115行至128行。",要调整TuGraph-DB的日志等级，可以通过修改配置文件中的相应参数来进行设置。具体的参数说明可以参考数据库的运行和服务配置文档。
VAL-8,0.8100938433998507,“memory”是内存，是用于监控服务性能的重要指标之一。,“memory”指的是计算机系统中的内存资源，用于存储和处理数据。
VAL-9,0.7422242920992541,每次执行查询的结果会追加至画布区域。,导入的数据会追加至画布区域，而不会覆盖或清空已有的数据。
VAL-10,0.6428296318277305,邮件地址为tugraph@service.alipay.com。,您可以通过在 TuGraph 的 GitHub 上提交一个 issue 提出建议。
VAL-11,0.540371949340927,暂不支持,是的，边索引支持查询加速。
VAL-12,0.8095986214550485,TuGraph Monitor负责收集性能指标并将数据包装为Prometheus可以使用的格式。,TuGraph Monitor的主要功能是通过C++ RPC Client与TuGraph进行通信，查询TuGraph服务所在机器的性能指标，并将结果包装成Prometheus需要的数据模型，以便进行运维监控。
VAL-13,0.8382268357559531,管理工具为lgraph_peer。,TuGraph HA 集群的管理工具是 `lgraph_peer`。
VAL-14,0.6147423095516596,通过设置refresh_time和expire_time参数均为0。,"将Token有效期修改为无限期，可以通过以下POST请求实现：

```plaintext
POST http://localhost:7070/update_token_time
Headers:
Accept: application/json; charset=UTF-8
Content-Type: application/json; charset=UTF-8
Body:
{
  ""Authorization"": ""Bearer your_token_here"",
  ""refresh_time"": 0,
  ""expire_time"": 0
}
```

成功修改后，返回状态码：200。"
VAL-15,0.8298770881286194,蚂蚁集团与清华大学联合研发的。,蚂蚁集团与清华大学。
VAL-16,0.6771210043093597,它依赖于TuGraph的数据库管理系统。,TuGraph图学习模块依赖于主要包括gcc、python、java等编译器的编译环境，以及gcc、boost、cmake等运行环境。
VAL-17,0.6296137945290309,需要字段名称、字段类型和一个布尔值标识字段是否可选。,在构造FieldSpec时需要以下参数：字段名称、字段类型、是否为主键、索引设置和字段描述。
VAL-18,0.8058068231646832,Antlr4 C++ target的并发性能不足以支持所需的超高并发GQL请求。,主要问题是并发性能不足，无法支持超高并发的 GQL 请求。
VAL-19,0.9646310556222818,"需要url（如""127.0.0.1:19099""）、user（如""admin""）和password（如""73@TuGraph""）。","需要三个参数：URL（如 ""127.0.0.1:19099""）、用户名（如 ""admin""）和密码（如 ""73@TuGraph""）。"
VAL-20,0.9336345681235376,目前，TuGraph-DB支持使用Open Cypher作为查询语言，即将支持ISO GQL查询语言。,TuGraph-DB查询引擎目前支持Cypher查询语言，未来计划支持ISO GQL。
VAL-21,0.6970782329956334,"接受 std::string &result, const std::string &procedure_type, const std::string &procedure_name, const std::string &graph。",DeleteProcedure函数接受三种类型的参数，分别是：procedureType（存储过程类型），procedureName（存储过程名称），和graph（要查询的图）。
VAL-22,0.6555420406162327,事务必须是只读的。,必须选择事务模式 TRAVERSAL_PARALLEL。
VAL-23,0.6959561198189258,"url, user, password。",构造函数需要以下参数：`url`（字符串），`user`（字符串），`password`（字符串）。
VAL-24,0.6704526863890503,expire_time实体定义为强制过期时间戳，默认设置为24小时。,TuGraph中expire_time的默认设置为有限期（具体时间未提供）。
VAL-25,0.8048771219174441,Neighbor Sampling、Edge Sampling、Random Walk Sampling 和 Negative Sampling。,四种采样算子是：Neighbor Sampling、Edge Sampling、Random Walk Sampling 和 Negative Sampling。
VAL-26,0.745367687365571,如果边已存在，则返回False；如果新建了边，则返回True。,执行UpsertEdge操作时，如果找到匹配项，返回更新后的边信息；如果没有找到匹配项，则创建新边并返回新边信息。
VAL-27,0.8474579347189298,ANTLR4支持生成Java、Python、C++、JavaScript、Go等10种目标语言的解析器。,ANTLR4支持生成的目标语言包括Java、Cpp等。
VAL-28,0.7432869500258259,抛出OutOfRange异常。,超出范围的微秒数会导致抛出异常。
VAL-29,0.853527563575131,VertexLockGuard是一个机制，用于控制程序对点数据的访存权限。,VertexLockGuard 是一个用于在对点数据进行操作时自动加锁的机制。它在创建时对指定的点（通过点ID vid）加锁，并在退出作用域时自动释放锁，从而简化了锁的管理。
VAL-30,0.6166021150938337,标记field是否为空,在TuGraph中，null array表示一个空的数组，没有任何元素，但仍会被视为有效的数据结构。
VAL-31,0.5351685383166273,可以写where语句进行过滤,"在TuGraph中，支持边属性匹配的方式是通过在查询中指定边的属性条件。你提到的Cypher查询 `MATCH (n:chunk {id: '21604c19-0d30-11ef-b83b-0242ac110005'})-[r:kw {name:""生活补贴""}]-(m)` 可能无法过滤边属性的原因有几个：

1. 属性名称需要符合命名规则和大小写敏感性。
2. 边的属性可能未在边上正确设置或命名，也就是边可能并不存在 `name` 这个属性。

为了确保边属性能够正确匹配，需确认边 `r` 的属性 `name` 已正确设置，并且在查询中遵循大小写敏感的规范。如果这些都符合，边属性匹配应该能够正常工作。"
VAL-32,0.7201720748981331,点类型通过调用 `db.createVertexLabelByJson` 创建，边类型通过 `db.createEdgeLabelByJson` 创建。,在TuGraph中，通过创建Label来定义点类型和边类型。每种Label对应一个预定义的数据格式，只有创建了相应的Label，才能在图中插入对应类型的点或边。
VAL-33,0.6886948548169765,"是的，如果指定log_dir为""""，再以后台运行方式启动server，就不会生成log了。如开debug了确实会频繁刷日志。日志是滚动生成的，超过256M就会生成一个新的日志文件，之前的日志文件就可以删了，可以手动清理。",如果不设置`log_dir`，则所有日志会输出到控制台，但在daemon模式下不会向console输出任何日志。
VAL-34,0.6331306612008488,"MATCH (n1 {name:'Hugo Weaving'}),(n2 {title:'The Matrix'}) CALL algo.shortestPath(n1,n2) YIELD nodeCount,totalCost RETURN nodeCount,totalCost","在城市公共交通系统中，计算从一个地点到另一个地点的最短路径可以使用以下方式调用 `algo.shortestPath`：

``` 
MATCH (startLocation {name:'地点A'}),(endLocation {name:'地点B'})
CALL algo.shortestPath(startLocation, endLocation) YIELD nodeCount, totalCost 
RETURN nodeCount, totalCost 
``` 

这个查询将返回从地点A到地点B的最短路径的节点数量和总成本。"
VAL-35,0.4117037039356407,The label.,返回类型为 `cypher::FieldData`。
VAL-36,0.7011415539778734,目前仅支持v1版本。,Rust存储过程目前仅支持v1版本的TuGraph。
VAL-37,0.9555876117151957,TuGraph单元测试采用gtest框架。,TuGraph使用gtest框架进行单元测试。
VAL-38,0.6459002719395959,是的，需要指定。,是的，创建 Label 的请求需要指定该 Label 是用于点（vertex）还是边（relationship），通过 `is_vertex` 参数来区分。
VAL-39,0.7229155751855046,简单图分析操作和复杂图分析操作。,在 TuGraph 中使用的两种主要图分析操作是简单图分析操作（例如最短路径算法 SPSP）和复杂图分析操作（例如 PageRank 算法）。
VAL-40,0.7165000962852831,"首先在需要添加埋点的代码文件中增加#include ""tools/lgraph_log.h""，之后使用LOG_DEBUG()、LOG_INFO()、LOG_WARN()、LOG_ERROR()、LOG_FATAL()等日志宏输出对应等级的，具体使用方法参考test/test_lgraph_log.cpp测试文件",在代码中为TuGraph-DB增加日志输出埋点，可以使用存储过程示例中提供的代码片段。通过在存储过程中调用 `LogExample();` 函数或使用Python中的 `print` 语句来输出调试信息。这些信息将在日志文件中记录为相应的日志条目或合并为一条WARN等级的日志。
VAL-41,0.6405837353316681,InputError。,抛出IOException异常。
VAL-42,0.885432214516742,Grafana主要用于服务性能指标的监控和可视化。,Grafana主要用于数据可视化和监控，通过支持多种数据源，帮助用户创建丰富的图表和仪表盘。
VAL-43,0.5578751827541588,执行用户定义的程序。,删除存储过程。
VAL-44,0.5012957281556774,"如果 src_vid < dst_vid, 关键是 (index field value + src_vid + dst_vid); 如果 src_vid > dst_vid, 关键是 (index field value + dst_vid + src_vid)。",PairUniqueIndex 的钥匙生成形式是通过将原始键与源顶点 ID 和目标顶点 ID 进行拼接生成的。
VAL-45,0.7871973314692463,FieldData用于表示布尔、整型、浮点数、双精度浮点数、字符串、日期、时间、点、线串、多边形、空间数据、浮点向量以及BLOB数据。,类FieldData用于表示图数据库中的字段数据类型，包括整数、浮点数、字符串、布尔值等。
VAL-46,0.8618146444564466,默认行为是在第一个错误包处停止导入。,发生数据包错误时，默认行为是导入将在第一个错误包处停止，并打印出已导入的包数。
VAL-47,0.8366489396920795,ORDER BY是GQL子句的一部分，用于对查询结果进行排序。,`ORDER BY`在GQL中的作用是对输出的结果进行排序。
VAL-48,0.8049830649445685,TuGraph-DB有2套http的接口，分别在src/restful/server/rest_server.cpp和src/http/http_server.cpp,TuGraph-DB提供HTTP接口，相关的接口代码可以在TuGraph的HTTP API文档中找到。
VAL-49,0.8029252251799881,是的，后面我们会加入rpm中，目前编译部署后可以使用lgraph_peer,lgraph_peer工具并不是只能通过编译方式部署后使用。
VAL-50,0.32025466376442147,25%,图数据库应用程序的CPU使用率可以通过调用`GET http://localhost:7070/info/cpu`接口获取，返回时会显示在`self`字段中，单位为%。
