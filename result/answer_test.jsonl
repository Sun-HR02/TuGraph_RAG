{"id": "TEST1-1", "output_field": "暂不支持。"}
{"id": "TEST1-2", "output_field": "\"Christopher Nolan\"和\"Corin Redgrave\"。"}
{"id": "TEST1-3", "output_field": "在TuGraph中，可以通过控制台的可视化界面查看现有角色及其相关信息。具体步骤是：\n\n1. 进入`角色管理`界面。\n2. 查看现有角色的名称、角色描述以及图权限。\n\n此外，可以使用REST API或Cypher查询中的特定命令来获取相关信息，但在给定的辅助文本中未提到对应的API或Cypher查询命令。"}
{"id": "TEST1-4", "output_field": "每个图项目中可以存储最多2^40个点。每个点或边类型最多可以有1024个属性。"}
{"id": "TEST1-5", "output_field": "在TuGraph 4.3.2的Docker镜像中，没有`setup.sh`脚本。如果需要执行一些初始化操作，可以尝试使用直接运行的方式启动并进入容器进行配置。"}
{"id": "TEST1-6", "output_field": "暂不支持。"}
{"id": "TEST1-7", "output_field": "`cmake .. -DOURSYSTEM=centos -DENABLE_BUILD_ON_AARCH64=ON`"}
{"id": "TEST1-8", "output_field": "“用于执行完成后清理指定的目录。”"}
{"id": "TEST1-9", "output_field": "`./lgraph_server -d start -c lgraph.json`"}
{"id": "TEST1-10", "output_field": "TuGraph团队通过优化C++ Target的并发性能，提高了解析速度，主要手段包括：识别问题、深入阅读Antlr4开源代码、梳理数据竞争链路、破解数据竞争问题。最终，通过改变关键数据的所有权，减少对锁的依赖实现了性能的大幅提升。"}
{"id": "TEST1-11", "output_field": "DELETE。"}
{"id": "TEST1-12", "output_field": "`AllocVertexSubset`函数用于分配一个ParallelBitset集合，用于表示所有点的状态是否激活。"}
{"id": "TEST1-13", "output_field": "TuGraph的在线增量导入功能通过RESTful API导入的数据大小建议最大为16MB，因此无法直接处理10G的数据。建议将大文件拆分成更小的部分进行导入。"}
{"id": "TEST1-14", "output_field": "CSV 和 JSON。"}
{"id": "TEST1-15", "output_field": "TuGraph 除了在语句前加 EXPLAIN 和 PROFILE 外，还可以通过调整数据库配置、优化查询结构、创建适当的索引等方式进行调优。"}
{"id": "TEST1-16", "output_field": "暂不支持。"}
{"id": "TEST1-17", "output_field": "使用Cython导入与Olap相关的模块和图数据库模块的方法是通过`from cython.cimports.olap_base import *`进行导入。"}
{"id": "TEST1-18", "output_field": "\"'unique'参数指定索引是否全局唯一，而'pair_unique'参数指定索引在两点间是否唯一。\""}
{"id": "TEST1-19", "output_field": "性能更高、兼容性更强、直观性好。"}
{"id": "TEST1-20", "output_field": "是的，报错信息“Vertex unique index value [xxx] is too long”表示属性值太长。根据TuGraph的限制，unique索引的最大长度是480字节，超过此长度的属性不能建立唯一索引。因此，错误可能是由于尝试为一个长度超过480字节的属性创建unique索引导致的。"}
{"id": "TEST1-21", "output_field": "“404 Not Found”。"}
{"id": "TEST1-22", "output_field": "编译环境、运行环境和精简运行环境。"}
{"id": "TEST1-23", "output_field": "Point、Linestring、Polygon。"}
{"id": "TEST1-24", "output_field": "\"extra\" 参数。"}
{"id": "TEST1-25", "output_field": "HA模式下，client只能向leader发送导入点边数据请求。"}
{"id": "TEST1-26", "output_field": "\"InvalidOperationException\"。"}
{"id": "TEST1-27", "output_field": "`GetVertexIndexIterator`函数在`liblgraph_python_api.Transaction`中用于获取`VertexIndexIterator`类型的迭代器。"}
{"id": "TEST1-28", "output_field": "可以指定错误继续执行和线程数。"}
{"id": "TEST1-29", "output_field": "“GetDB.Process”函数。"}
{"id": "TEST1-30", "output_field": "\"AuthError异常\""}
{"id": "TEST1-31", "output_field": "当节点的出度大于0时，初始化时每个节点的PageRank值是“节点数量的倒数除以该节点的出度”。"}
{"id": "TEST1-32", "output_field": "CSV 和 JSON。"}
{"id": "TEST1-33", "output_field": "这个报错信息提示在尝试读取数据时超出了数组的实际大小，所需大小为4，而实际大小为2。请检查数据读取过程中是否有不正确的配置或者数据文件损坏。如果使用的是自定义或外部数据文件，确保其格式符合TuGraph的要求。如果问题持续存在，建议详细检查代码实现或者与TuGraph团队联系以获取深入支持。"}
{"id": "TEST1-34", "output_field": "事务必须是只读事务。"}
{"id": "TEST1-35", "output_field": "CSV 文件中的栏位通过配置文件中的 `columns` 字段与数据库的属性字段对应。例如，对于 `actors.csv` 文件，`columns` 数组中的 \"aid\" 和 \"name\" 对应于配置文件中定义的属性 \"aid\" 和 \"name\"。"}
{"id": "TEST1-36", "output_field": "\"label_type、label_name、extra、field_spec\"。"}
{"id": "TEST1-37", "output_field": "7070。"}
{"id": "TEST1-38", "output_field": "暂不支持。"}
{"id": "TEST1-39", "output_field": "蚂蚁集团和清华大学。"}
{"id": "TEST1-40", "output_field": "图学习系统主要解决图学习问题。"}
{"id": "TEST1-41", "output_field": "暂不支持。"}
{"id": "TEST1-42", "output_field": "在配置文件中，将 `rpc_port` 的值设置为你希望的端口号，例如：\n```json\n\"rpc_port\" : 9090\n```"}
{"id": "TEST1-43", "output_field": "在关联关系处理上，图数据库相比关系型数据库的优势在于其性能。图数据库通过直接访问类指针，高效地操作关联数据，其性能比关系型数据库提高2到4个数量级。"}
{"id": "TEST1-44", "output_field": "默认密码：73@TuGraph。"}
{"id": "TEST1-45", "output_field": "list<list<string>>"}
{"id": "TEST1-46", "output_field": "是。"}
{"id": "TEST1-47", "output_field": "TuGraph的RpcClient构造函数需要以下参数用于用户登录：“url, user, pass”。"}
{"id": "TEST1-48", "output_field": "`./lgraph_cypher.py -c /home/usr/lgraph_standalone.json -u user -P password -s \"MATCH (n) RETURN n\" > result.txt`"}
{"id": "TEST1-49", "output_field": "数据和日志目录被挂载到了宿主机的 `/root/tugraph/data` 和 `/root/tugraph/log` 进行持久化。"}
{"id": "TEST1-50", "output_field": "遍历的起始点设置有三种方式：通过单个点 ID 指定，通过点 ID 集合指定，或通过过滤函数指定。"}
{"id": "TEST1-51", "output_field": "“暂不支持”。"}
{"id": "TEST1-52", "output_field": "由蚂蚁集团与清华大学联合研发。"}
{"id": "TEST1-53", "output_field": "不需要额外的系统库。"}
{"id": "TEST1-54", "output_field": "函数 `SetFrontier(std::function<bool(VertexIterator&)> root_vertex_filter)` 是通过 `root_vertex_filter` 函数对图中的所有顶点进行过滤。只有在 `root_vertex_filter` 返回 `true` 的顶点才会被设置为遍历的起始点，从而将它们包含在遍历的起始集合中。"}
{"id": "TEST1-55", "output_field": "暂不支持。"}
{"id": "TEST1-56", "output_field": "暂不支持。"}
{"id": "TEST1-57", "output_field": "创建组合索引时，需要提供的参数包括：\n1. 属性个数在2到16个之间。\n2. 唯一组合索引的属性长度之和不能超过480-2*(属性个数-1)字节。\n3. 非唯一组合索引的属性长度之和不能超过475-2*(属性个数-1)字节。"}
{"id": "TEST1-58", "output_field": "\"InvalidValueException\""}
{"id": "TEST1-59", "output_field": "TuGraphClient 是 TuGraph 数据库的 RPC 客户端。"}
{"id": "TEST1-60", "output_field": "支持 X86_64 和 ARM64 架构的平台。"}
{"id": "TEST1-61", "output_field": "是的，`importDataFromContent` 中的前两个参数 `desc` 和 `data` 的格式与执行导入脚本时相同。"}
{"id": "TEST1-62", "output_field": "`类中的集合`用于映射为一个边类型。"}
{"id": "TEST1-63", "output_field": "暂不支持。"}
{"id": "TEST1-64", "output_field": "当 `AlterEdgeLabelAddFields` 函数成功执行时，意味着已成功添加指定字段至指定边类型的所有实例。"}
{"id": "TEST1-65", "output_field": "带权图的边权重可以是整数或double类型。"}
{"id": "TEST1-66", "output_field": "RPC（远程过程调用）是一种通过网络从远程计算机程序上请求服务，而不需要了解底层网络技术的协议。"}
{"id": "TEST1-67", "output_field": "在TuGraph中，主键的作用是作为用户自定义的点数据主键，默认具有唯一索引功能，用于确保在对应的点类型中唯一。"}
{"id": "TEST1-68", "output_field": "RpcException 是一种用于处理RPC通道初始化失败的异常类型。"}
{"id": "TEST1-69", "output_field": "支持在MATCH语句中使用SET设置多个属性。"}
{"id": "TEST1-70", "output_field": "TuGraph 优化了 Antlr4 的 C++ Target 的并发性能，提升了 10 倍。"}
{"id": "TEST1-71", "output_field": "在处理节点和关系的标签数量上，TuGraph和OpenCypher的不同在于：TuGraph中的每个节点或关系必须且仅能有一个标签，而OpenCypher中的节点或关系可以有0到多个标签。"}
{"id": "TEST1-72", "output_field": "成功执行时返回值为“true”。"}
{"id": "TEST1-73", "output_field": "暂不支持。"}
{"id": "TEST1-74", "output_field": "字符串格式。"}
{"id": "TEST1-75", "output_field": "\"SetFrontier(std::function<bool(VertexIterator &)> root_vertex_filter)\""}
{"id": "TEST1-76", "output_field": "部署时间大约需要2分钟。"}
{"id": "TEST1-77", "output_field": "图的基本元素包括节点（顶点）和边。"}
{"id": "TEST1-78", "output_field": "C++、Python 和 Rust。"}
{"id": "TEST1-79", "output_field": "使用 GET 方法访问 URI `/db/{graph_name}/cpp_plugin|python_plugin` 可以获取存储过程的列表。"}
{"id": "TEST1-80", "output_field": "RPC（远程过程调用）是一种通过网络从远程计算机程序上请求服务，而不需要了解底层网络技术的协议。"}
{"id": "TEST1-81", "output_field": "```acted_in``` 和 ```directed```。"}
{"id": "TEST1-82", "output_field": "使用 `./lgraph_server -d start -c lgraph.json` 命令启动 TuGraph 服务器。"}
{"id": "TEST1-83", "output_field": "在添加顶点时，如果存在相同的unique_id，将会导致唯一索引冲突，操作会失败。"}
{"id": "TEST1-84", "output_field": "X86_64 和 ARM64 架构。"}
{"id": "TEST1-85", "output_field": "TuGraph-OGM 支持将JAVA对象（POJO）映射到TuGraph中，JAVA中的类映射为节点、类中的集合映射为边、类的属性映射为属性，并提供了操作图数据库的函数。因此，JAVA开发人员可以在熟悉的生态中轻松使用TuGraph数据库，并且TuGraph-OGM兼容Neo4j-OGM。"}
{"id": "TEST1-86", "output_field": "在GQL中，`OPTIONAL MATCH`用于匹配图模式，如果查询未命中，则返回`null`。"}
{"id": "TEST1-87", "output_field": "通过`LoadProcedure`方法的`read_only`参数控制存储过程是否为只读。"}
{"id": "TEST1-88", "output_field": "\"RpcStatusException\"。"}
{"id": "TEST1-89", "output_field": "暂不支持。"}
{"id": "TEST1-90", "output_field": "```\nMATCH (m:movie {title: 'Forrest Gump'})<-[r:acted_in]-(a:person) RETURN a.name, r.role\n```"}
{"id": "TEST1-91", "output_field": "六种基础算法。"}
{"id": "TEST1-92", "output_field": "Point、Linestring、Polygon。"}
{"id": "TEST1-93", "output_field": "开源和企业版都支持。"}
{"id": "TEST1-94", "output_field": "EWKB格式存储，Point类型为定长存储50。"}
{"id": "TEST1-95", "output_field": "允许用户对存储过程进行增删改查操作。"}
{"id": "TEST1-96", "output_field": "暂不支持。"}
{"id": "TEST1-97", "output_field": "如果给定的 `vertex_label` 或 `field` 不存在，可能会导致操作失败，但具体行为在提供的信息中没有详细说明，因此具体结果可能依赖于数据库的错误处理机制。建议您查看TuGraph的官方文档或错误处理部分以获取更详细的信息。"}
{"id": "TEST1-98", "output_field": "```powershell\n$ ./lgraph_cypher.py -c /home/usr/lgraph_standalone.json -u user -P password -s \"MATCH (n) RETURN n\"\n```"}
{"id": "TEST1-99", "output_field": "`reduce_plus`函数用于对每个`work`处理后的节点返回值进行累加操作。"}
{"id": "TEST1-100", "output_field": "暂不支持。"}
{"id": "TEST1-101", "output_field": "暂不支持。"}
{"id": "TEST1-102", "output_field": "TuGraph-DB通过支持复杂图查询和内置图分析算法，可以帮助用户在设定好城市、航班间隔和其他限制条件后，快速找到满足这些条件的最优路线，从而解决旅行时选择路线的烦恼。"}
{"id": "TEST1-103", "output_field": "用于检查一个顶点或边是否具有某个字段。"}
{"id": "TEST1-104", "output_field": "最低为4核，建议为8核。"}
{"id": "TEST1-105", "output_field": "用于获取OlapOnDB中节点对应TuGraph的节点编号。"}
{"id": "TEST1-106", "output_field": "当尝试更新一个存在的边但标签与指定的不符时，更新操作将失败，因为每个点和边在TuGraph中有且仅有一个标签。"}
{"id": "TEST1-107", "output_field": "是的，批量在线导入可以使用“CREATE (n), (m)”语法来创建多个节点。"}
{"id": "TEST1-108", "output_field": "将TuGraph数据库的数据备份到另一个目录。"}
{"id": "TEST1-109", "output_field": "通过URI格式 `/db/{graph_name}/node/{vertex_id}` 和 GET 方法可以获取某个节点的所有属性。"}
{"id": "TEST1-110", "output_field": "知识图谱的基本元素包括节点（实体）和关系（边）。"}
{"id": "TEST1-111", "output_field": "TuGraph 支持 C++、Python 和 Rust 语言编写的存储过程。"}
{"id": "TEST1-112", "output_field": "暂不支持。"}
{"id": "TEST1-113", "output_field": "标签属性图模型、ACID事务处理、图分析算法、全文/主键/二级索引、OpenCypher查询语言、基于C++/Python的存储过程。"}
{"id": "TEST1-114", "output_field": "`RpcStatusException`。"}
{"id": "TEST1-115", "output_field": "2024年3月。"}
{"id": "TEST1-116", "output_field": "C++17。"}
{"id": "TEST1-117", "output_field": "`cython.cimports.libcpp.unordered_map` 是在Cython中导入C++标准库的 `unordered_map` 的方式。这允许在Cython代码中使用C++的无序映射容器，提供类似字典的功能。"}
{"id": "TEST1-118", "output_field": "\"-d {db_dir} 和 -g {graph_list} 选项。\""}
{"id": "TEST1-119", "output_field": "支持GQL语句，但目前并未完全支持所有的GQL语法。"}
{"id": "TEST1-120", "output_field": "暂不支持。"}
{"id": "TEST1-121", "output_field": "SetUserGraphAccess方法主要用于设置用户对特定图的访问权限。"}
{"id": "TEST1-122", "output_field": "使用 `lgraph_server` 命令将 TuGraph 作为普通进程运行，并设置 `--log_dir \"\"`，可以在运行单元测试过程中将日志输出到终端。启动命令示例如下：\n\n```shell\n$ ./lgraph_server -d run -c lgraph.json --log_dir \"\"\n```\n\n或\n\n```shell\n$ ./lgraph_server -c lgraph.json --log_dir \"\"\n```"}
{"id": "TEST1-123", "output_field": "\"Nav\" 语句的使用主要在于图和流计算的中间计算结果的管理中，如在Geaflow中通过状态管理实现低成本、高吞吐、低延迟的存储和查询能力。"}
{"id": "TEST1-124", "output_field": "暂不支持。"}
{"id": "TEST1-125", "output_field": "\"TuGraph Browser 是一个可视化交互界面。\""}
{"id": "TEST1-126", "output_field": "SybilRank算法从非Sybil节点开始进行提前终止的随机游走。"}
{"id": "TEST1-127", "output_field": "节点和边的属性在知识图谱中用于表示不同实体及其复杂关系，能够更好地分析和表达具有多种类型实体和复杂关系的现实世界系统。"}
{"id": "TEST1-128", "output_field": "在提交代码前先提交一个 issue 是为了避免与其他开发者产生重复工作，确保修改的必要性，并减少沟通成本和 pull request 被拒绝的情况。"}
{"id": "TEST1-129", "output_field": "企业版与社区版的主要差距在于企业版提供了更完善的商业化功能支持，包括分布式集群架构和多种商业图算法支持，此外还具有专家支持服务。商业版内置了34种算法，而社区版仅内置6种基础算法。"}
{"id": "TEST1-130", "output_field": "\"prepare_cost = 0.10(s)\\ncore_cost = 0.02(s)\\nfound_vertices = 3829\\noutput_cost = 0.00(s)\\ntotal_cost = 0.11(s)\""}
{"id": "TEST1-131", "output_field": "当 `key_start=key_end=v` 时，`GetVertexIndexIterator` 将返回指向 `field` 值为 `v` 的点的迭代器。"}
{"id": "TEST1-132", "output_field": "写入TuGraph数据库中的顶点数据时，可以通过以下方式使用代码进行处理：\n\n```python\nNodeInfo = []\nEdgeInfo = []\ngetdb.Process(db, olapondb, feature_len, NodeInfo, EdgeInfo)\n```\n\n需要注意的是：\n- `NodeInfo[0]` 用于存储顶点ID。\n- `NodeInfo[1]` 用于存储顶点特征。\n- `NodeInfo[2]` 用于存储顶点标签。\n- `NodeInfo[3]` 用于存储顶点类型。"}
{"id": "TEST1-133", "output_field": "`lgraph_api::Transaction`的作用是提供一个事务的上下文，用于执行数据库操作，如查询节点或边、插入数据等。这在TuGraph中用于确保数据库操作的原子性和一致性。"}
{"id": "TEST1-134", "output_field": "“暂不支持”。"}
{"id": "TEST1-135", "output_field": "字符串格式。"}
{"id": "TEST1-136", "output_field": "[https://prometheus.io/download/](https://prometheus.io/download)"}
{"id": "TEST1-137", "output_field": "全图/全量数据分析类的任务。"}
{"id": "TEST1-138", "output_field": "在TuGraph中，如果表内属性字段名为`id`时，为避免报错，应该确保在XML配置中的`node_id`字段与实际数据库中的字段名不冲突或者不重复使用`id`，并在涉及到`upsert`操作时明确指定不同的字段名来表示节点的标识符。例如，使用自定义的`node1_id`和`node2_id`等清晰区分的字段名。"}
{"id": "TEST1-139", "output_field": "在OGM中，通过实例化类和将两个节点互相存储在对方的集合（该集合在构建时被标注为边）中来创建边。例如，`alice.actsIn(speed);` 这部分代码用于创建边标签。在这行代码中，`actsIn`方法将`speed`节点与`alice`节点通过边标签（例如`DIRECT`）连接起来。"}
{"id": "TEST1-140", "output_field": "暂不支持。"}
{"id": "TEST1-141", "output_field": "在ARM机器（如Mac M1）上编译TuGraph时，需要在执行CMake时添加参数`-DENABLE_BUILD_ON_AARCH64=ON`，例如：\n\n```bash\ncmake .. -DOURSYSTEM=ubuntu -DENABLE_BUILD_ON_AARCH64=ON\n```"}
{"id": "TEST1-142", "output_field": "CPU: 4 Cores, 内存: 4GB, 外存: 100GB。"}
{"id": "TEST1-143", "output_field": "使用 `algo.shortestPath(startNode, endNode, config)` 查询两点间的一条通路。"}
{"id": "TEST1-144", "output_field": "暂不支持。"}
{"id": "TEST1-145", "output_field": "TuGraph Restful Server 使用brpc框架支持其HTTP协议，提供的主要功能包括文件上传，数据导入，导入进度查询，cypher查询和文件删除等。"}
{"id": "TEST1-146", "output_field": "禁用角色后，对应角色的图访问权限失效。"}
{"id": "TEST1-147", "output_field": "在贡献代码之前，请确保阅读并同意[个人贡献者许可协议](3.individual-cla.md)或[公司贡献者许可协议](4.corporate-cla.md)。"}
{"id": "TEST1-148", "output_field": "```\nCALL db.dropAllVertex()\n```"}
{"id": "TEST1-149", "output_field": "TuGraph-OGM 类似于 MyBatis 的方面主要在于它们都提供了对象映射功能，可以将数据库返回的数据映射成 Java 中的对象，方便用户进行操作，从而简化了与数据库的交互。"}
{"id": "TEST1-150", "output_field": "支持通过Docker方式部署BROWSER。"}
{"id": "TEST1-151", "output_field": "有数据导入工具，名称为`lgraph_import`。相关代码与工具随TuGraph数据库安装包提供。"}
{"id": "TEST1-152", "output_field": "图数据库相比关系型数据库的独特优势主要体现在以下几个方面：\n\n- **性能**：在处理关联关系时，图数据库无需使用JOIN操作，可以通过直接访问类指针提高操作效率，比关系型数据库高2到4个数量级。\n- **兼容性**：图数据库在项目演变时，只需添加新的点、边和属性，而无需大幅修改源数据。\n- **直观性**：通过点边连接的拓扑结构直观表达和分析现实世界的关系，更加自然和直接。"}
{"id": "TEST1-153", "output_field": "Java、Python、C++。"}
{"id": "TEST1-154", "output_field": "EWKT（Extended Well-Known Text）和EWKB（Extended Well-Known Binary）。"}
{"id": "TEST1-155", "output_field": "用于处理数据导入请求。"}
{"id": "TEST1-156", "output_field": "TuGraph企业版是商业化功能更为完善的一站式图平台，支持分布式集群架构及多种图计算引擎，适用于探索、研发、服务、运维管理全生命周期，并提供多地多中心的部署形态和专家支持服务。"}
{"id": "TEST1-157", "output_field": "GET 方法和 URI `/db/{graph_name}/cpp_plugin|python_plugin`。"}
{"id": "TEST1-158", "output_field": "TuGraph基础算法包包含以下6个算法：BFS（广度优先搜索）、PageRank（网页排序）、LPA、WCC、SSSP（单源最短路径）、APSP（全对最短路径）。"}
{"id": "TEST1-159", "output_field": "\"7073\""}
{"id": "TEST1-160", "output_field": "调用函数 `CALL dbms.security.disableRole(role::STRING, disable::BOOLEAN)`，当参数 `disable` 为 `true` 时，函数返回 `true`。"}
{"id": "TEST1-161", "output_field": "数据不会丢失。"}
{"id": "TEST1-162", "output_field": "返回`null`。"}
{"id": "TEST1-163", "output_field": "暂不支持。"}
{"id": "TEST1-164", "output_field": "\"未知状态。\""}
{"id": "TEST1-165", "output_field": "DUAL_DIRECTION: 输入文件为非对称图，加载图为非对称图。"}
{"id": "TEST1-166", "output_field": "暂不支持。"}
{"id": "TEST1-167", "output_field": "遍历点个数。"}
{"id": "TEST1-168", "output_field": "暂不支持。"}
{"id": "TEST1-169", "output_field": "在GetEdgeProp命令中指定特定时间戳的边属性，您需要在配置文件中的`schema`部分将时间戳字段定义为边的属性之一。通过`temporal`关键字可以为边指定时间戳属性。例如：\n\n```plaintext\n- tempTimestamp (需在schema中定义为边属性)\n```\n\n然后可以在查询中根据这个字段进行条件过滤来查找特定时间戳的边。具体如何在查询中使用时间戳，可能需要根据实际使用的查询接口和语法来进行操作。"}
{"id": "TEST1-170", "output_field": "7070。"}
{"id": "TEST1-171", "output_field": "支持运行图算法，并提供内置图分析算法。"}
{"id": "TEST1-172", "output_field": "Python存储过程接口的重要组件和功能包括：\n\n1. **编写和执行**：Python存储过程可以直接编写使用，不需要编译，并通过调用核心API进行操作。\n2. **返回结果**：返回一个包含执行状态和结果的`tuple`，例如：(True, result)。\n3. **日志输出**：可以使用`print`来输出调试信息，调试信息在存储过程运行结束后以WARN等级输出到日志文件。"}
{"id": "TEST1-173", "output_field": "成功返回 `true`，失败返回 `false`。"}
{"id": "TEST1-174", "output_field": "复杂图分析操作在 TuGraph 中通过图分析引擎执行，需要将存储中的图数据导出成内存中的一个快照进行操作。这种操作只能串行执行，且利用所有的CPU资源。此外，用户可借助 C++ OLAP API 快速导出子图并运行复杂分析，比如 PageRank、连通分量等。"}
{"id": "TEST1-175", "output_field": "`filter_output_default`函数的主要作用是作为默认的写入数据规则函数，指定待写入的数据需要满足的条件。"}
{"id": "TEST1-176", "output_field": "暂不支持。"}
{"id": "TEST1-177", "output_field": "暂不支持。"}
{"id": "TEST1-178", "output_field": "暂不支持。"}
{"id": "TEST1-179", "output_field": "暂未提供直接设置第一次快照时间的默认配置选项。"}
{"id": "TEST1-180", "output_field": "暂不支持。"}
{"id": "TEST1-181", "output_field": "不同的查询结果可能是由于编码方式的不同导致的。TuGraph在进行点查询时，编码方式对结果的影响不大。而在边查询中，离散编码和紧凑编码的性能表现不同，尤其是在边遍历和单边查询中。紧凑编码在边遍历时效率更高，但单边查询时离散编码可能略有优势。这些差异可能是查询中结果不同的原因。"}
{"id": "TEST1-182", "output_field": "TuGraph-OGM支持将JAVA对象（POJO）映射到TuGraph中。"}
{"id": "TEST1-183", "output_field": "```python\nclient = liblgraph_client_python.client(\"127.0.0.1:19099\", \"admin\", \"73@TuGraph\")\n```"}
{"id": "TEST1-184", "output_field": "\"InvalidRoleNameException\""}
{"id": "TEST1-185", "output_field": "云部署、Docker部署、本地部署。"}
{"id": "TEST1-186", "output_field": "\"Corin Redgrave\"。"}
{"id": "TEST1-187", "output_field": "可以继续导入。"}
{"id": "TEST1-188", "output_field": "使用`Result.SetHeader()`方法为表设置表头。"}
{"id": "TEST1-189", "output_field": "个人贡献者许可协议的主要目的是确保参与者在为TuGraph贡献代码时，同意相关的法律条款和条件，以保护知识产权和贡献者的权益。"}
{"id": "TEST1-190", "output_field": "不包含Java、Python相关功能，无C++ plugin编译运行，仅so上传，无全文索引，无Python plugin。"}
{"id": "TEST1-191", "output_field": "主要使用了OlapOnDB类中的辅助函数。"}
{"id": "TEST1-192", "output_field": "暂不支持。"}
{"id": "TEST1-193", "output_field": "暂不支持。"}
{"id": "TEST1-194", "output_field": "\"暂不支持\""}
{"id": "TEST1-195", "output_field": "禁用后，用户将从该角色中获得“无权限（NONE）”。"}
{"id": "TEST1-196", "output_field": "Prometheus 和 Grafana。"}
{"id": "TEST1-197", "output_field": "TuGraph 服务在配置文件（一般为lgraph.json）中读取其配置。"}
{"id": "TEST1-198", "output_field": "暂不支持。"}
{"id": "TEST1-199", "output_field": "可用于展开当前前沿的过滤函数类型为：\n\n1. `std::function<bool(OutEdgeIterator &)> out_edge_filter`\n2. `std::function<bool(VertexIterator &)> out_neighbour_filter`\n3. `std::function<bool(InEdgeIterator &)> in_edge_filter`\n4. `std::function<bool(VertexIterator &)> in_neighbour_filter`"}
{"id": "TEST1-200", "output_field": "“BadReadException”。"}
{"id": "TEST1-201", "output_field": "“暂不支持“。"}
{"id": "TEST1-202", "output_field": "答案：资源名称为“graph_used”的颜色设置为固定的“light-orange”。"}
{"id": "TEST1-203", "output_field": "“CALL db.dropDB()”可以删除所有的点边数据和图schema。"}
{"id": "TEST1-204", "output_field": "如果成功，返回代码200，同时返回新建立的边的euid列表。"}
{"id": "TEST1-205", "output_field": "TuGraph选择B+树作为其底层存储数据结构是因为B+树具有较好的顺序读写性能。"}
{"id": "TEST1-206", "output_field": "指定 `jsonFormat` 为 true 可以返回 JSON 格式的执行结果，指定为 false 可以返回字符串格式的执行结果。"}
{"id": "TEST1-207", "output_field": "通过采用紧凑编码可以提高查询效率，尤其是在边遍历操作中。紧凑编码将数据排列在一起，顺序访问的特性使得效率大大提升。此外，针对查询语句的优化，可以通过使用 `WITH` 语句向下传递来改进查询速度。"}
{"id": "TEST1-208", "output_field": "当 `FieldData` 类中的 `integer()` 方法尝试将非整数数据类型转换为整数时，会抛出 `std::bad_cast` 异常。"}
{"id": "TEST1-209", "output_field": "是，TuGraph-DB的存储引擎使用了KV数据库，基于LMDB构建。"}
{"id": "TEST1-210", "output_field": "可以通过修改配置文件\"/usr/local/etc/lgraph.json\"中的\"web\"参数来切换新旧版本的web界面。对于老版本，设置为\"/usr/local/share/lgraph/resource\"；对于新版本，设置为\"/usr/local/share/lgraph/browser-resource\"。完成后，执行`docker restart tugraph`以使更改生效。新版本是默认选项。"}
{"id": "TEST1-211", "output_field": "暂不支持。"}
{"id": "TEST1-212", "output_field": "B+树。选择B+树的主要原因是其具有较好的顺序读写性能，适合支持实时的增删查改事务。"}
{"id": "TEST1-213", "output_field": "暂不支持。"}
{"id": "TEST1-214", "output_field": "新手、系统开发者、生产运维人员、研究人员等不同类型的用户。"}
{"id": "TEST1-215", "output_field": "POST 请求用于创建实体，提交 Cypher，以及加载和调用存储过程。"}
{"id": "TEST1-216", "output_field": "最低外存配置要求未明确提及。建议外存大小为实际数据大小的4倍。"}
{"id": "TEST1-217", "output_field": "如果指定的目录不存在，构造函数会自动创建目录。"}
{"id": "TEST1-218", "output_field": "默认的 `n_limit` 参数值为 \"暂不支持\"。"}
{"id": "TEST1-219", "output_field": "暂不支持。"}
{"id": "TEST1-220", "output_field": "暂不支持。"}
{"id": "TEST1-221", "output_field": "GCN模型的主要组成部分包括：两层图卷积层（GraphConv），一个ReLU激活函数，以及一个Dropout层。"}
{"id": "TEST1-222", "output_field": "gtest框架。"}
{"id": "TEST1-223", "output_field": "暂不支持。"}
{"id": "TEST1-224", "output_field": "暂不支持。"}
{"id": "TEST1-225", "output_field": "支持OpenCypher查询语言。目前关于将来支持的查询语言无相关信息。"}
{"id": "TEST1-226", "output_field": "暂不支持。"}
{"id": "TEST1-227", "output_field": "可以通过发送一个POST请求到URI `/role`，并在请求体中包含角色名和描述信息来创建一个新的角色。请求格式如下：\n\n```\nPOST http://localhost:7070/role\nAccept: application/json; charset=UTF-8\nContent-Type: application/json; charset=UTF-8\nAuthorization: Bearer <token>\nInput:\n{\n  \"role\": \"new_role\",\n  \"description\": \"This is a new role.\"\n}\n```\n\n成功后返回状态码“200”。"}
{"id": "TEST1-228", "output_field": "暂不支持。"}
{"id": "TEST1-229", "output_field": "暂不支持。"}
{"id": "TEST1-230", "output_field": "HA支持Witness角色和管理工具。"}
{"id": "TEST1-231", "output_field": "通过在调用 `CallGql` 接口时传递 `graph` 参数来指定要查询的图的名称。"}
{"id": "TEST1-232", "output_field": "支持。"}
{"id": "TEST1-233", "output_field": "TuGraph-DB兼容Neo4j的通讯协议，因此可以使用Neo4j的驱动连接TuGraph-DB的server。"}
{"id": "TEST1-234", "output_field": "对于无法查询到有属性的边数据的问题，可能的原因包括：\n\n1. **索引问题**：确认是否针对边的属性建立了适当的索引（unique, pair_unique, non_unique）以提升查询效率。\n\n2. **编码方式**：查询边数据是否因编码问题影响到数据存取，包括离散编码和紧凑编码的选择。紧凑编码可能在读取时性能更好。\n\n3. **边属性的定义**：确认在创建时是否正确定义了边上的属性。\n\n建议检查以上问题。此外，如果以上方法仍未解决问题，需要检查具体的数据库环境配置和日志，以排查其他可能的系统性问题。"}
{"id": "TEST1-235", "output_field": "要将“actors.csv”导入到TuGraph，请使用以下DataX作业配置文件：\n\n```json\n{\n\"job\": {\n\"setting\": {\n\"speed\": {\n\"channel\": 1\n}\n},\n\"content\": [\n{\n\"reader\": {\n\"name\": \"txtfilereader\",\n\"parameter\": {\n\"path\": [\"actors.csv\"],\n\"encoding\": \"UTF-8\",\n\"column\": [\n{\n\"index\": 0,\n\"type\": \"string\"\n},\n{\n\"index\": 1,\n\"type\": \"string\"\n}\n],\n\"fieldDelimiter\": \",\"\n}\n},\n\"writer\": {\n\"name\": \"tugraphwriter\",\n\"parameter\": {\n\"url\": \"bolt://127.0.0.1:27687\",\n\"username\": \"admin\",\n\"password\": \"73@TuGraph\",\n\"graphName\": \"default\",\n\"labelType\": \"VERTEX\",\n\"labelName\": \"actor\",\n\"batchNum\": 1000,\n\"properties\": [\"aid\", \"name\"]\n}\n}\n}\n]\n}\n}\n```"}
{"id": "TEST1-236", "output_field": "创建新子图时需要的参数有三个：子图名称（graph_name）、子图描述（description）和子图的最大容量（max_size_GB）。"}
{"id": "TEST1-237", "output_field": "在`test_export_default`函数中，可以通过以下步骤验证导出后再次导入的数据是否与原始数据一致：\n\n1. **数据导出**：使用`lgraph_export`命令将当前数据库的数据导出到指定目录。\n\n2. **数据导入**：将导出的数据使用离线导入工具导入到一个新的数据库目录中。\n\n3. **数据验证**：启动新导入的数据的数据库实例，通过查询验证新数据库中的数据与原始数据库中的数据是否一致。\n\n具体实现可以通过以下步骤进行：\n\n- 在导出数据后，使用相同的导入配置将数据导入到一个新的数据库目录。\n- 启动新数据库实例。\n- 使用查询语句（如Cypher）对比新旧数据库中的数据，确保数据一致性。\n\n通过这些步骤，可以验证导出后再次导入的数据与原始数据的一致性。"}
{"id": "TEST1-238", "output_field": "在处理节点vi时，`work`函数的返回值代表的是该节点的局部计算结果，该结果会被用于后续的reduce操作。"}
{"id": "TEST1-239", "output_field": "暂不支持。"}
{"id": "TEST1-240", "output_field": "\"200 OK\""}
{"id": "TEST1-241", "output_field": "暂不支持。"}
{"id": "TEST1-242", "output_field": "改善系统性能，减少频繁的 IO 操作。"}
{"id": "TEST1-243", "output_field": "出边的源节点ID。"}
{"id": "TEST1-244", "output_field": "`OPTIONAL MATCH`用于匹配图模式，当匹配不成功时返回`null`。"}
{"id": "TEST1-245", "output_field": "GraphDB实例可能无法使用的情况包括系统宕机或故障导致的不可用状态。"}
{"id": "TEST1-246", "output_field": "liblgraph.so"}
{"id": "TEST1-247", "output_field": "暂不支持。"}
{"id": "TEST1-248", "output_field": "在每次迭代中，活跃顶点数量通过 `num_activations` 变量进行更新。在每一轮中，`num_activations` 通过检查每个顶点的邻接节点是否未被访问来增加活跃顶点，并在轮次结束时被重新计算。活跃顶点的数量在每次迭代后更新为 `discovered_vertices`。"}
{"id": "TEST1-249", "output_field": "角色名长度不能超过 64 字节。"}
{"id": "TEST1-250", "output_field": "修改角色描述的HTTP方法是PUT，用于启用角色的HTTP方法是暂不支持。"}
