{"id": "TEST1-1", "output_field": "如果指定的值不包含在 `value_dict` 中，将导致无法匹配到对应的边，从而不执行插入或更新操作。"}
{"id": "TEST1-2", "output_field": "如果查询数据库中前两个人的名字，返回的名字是：“LIMIT 2”。"}
{"id": "TEST1-3", "output_field": "\"可以使用 `CALL db.getRoles()` 查询数据库中现有角色及其相关信息。\""}
{"id": "TEST1-4", "output_field": "最大可以创建的点数和边数为“未限制”。点上最多可以创建16个属性，边上最多可以创建16个属性。"}
{"id": "TEST1-5", "output_field": "没有 `setup.sh` 脚本可能是因为目录结构发生了变化。请检查容器内的其他目录，或者查看官方文档以获取最新的目录结构信息。"}
{"id": "TEST1-6", "output_field": "“没有参数可以控制pid文件的路径，默认在pwd路径下生成。”"}
{"id": "TEST1-7", "output_field": "在ARM机器上编译TuGraph时，可以在cmake命令中添加`-DCMAKE_C_COMPILER=gcc`和`-DCMAKE_CXX_COMPILER=g++`来指定编译器。"}
{"id": "TEST1-8", "output_field": "\"cleanup_dir指定的目录用于清理临时文件和数据。\""}
{"id": "TEST1-9", "output_field": "“`./lgraph_server -d start -c lgraph.json`”"}
{"id": "TEST1-10", "output_field": "主要优化手段包括：高效的存储结构、索引机制、查询优化、内存管理等。"}
{"id": "TEST1-11", "output_field": "“DELETE”"}
{"id": "TEST1-12", "output_field": "`AllocVertexSubset`函数用于从所有节点中获取一个活跃点的集合。"}
{"id": "TEST1-13", "output_field": "\"导入10G数据时，建议将每次导入的数据量控制在16MB左右，最长不超过17MB。\""}
{"id": "TEST1-14", "output_field": "\"TuGraph支持的导出格式为`csv`和`json`。\""}
{"id": "TEST1-15", "output_field": "除了使用EXPLAIN和PROFILE，还可以通过优化索引、调整参数配置和分析执行计划来调优TuGraph。"}
{"id": "TEST1-16", "output_field": "\"RpcSingleClient 构造函数需要三个参数：url（str），user（str），password（str）。\""}
{"id": "TEST1-17", "output_field": "\"通过 Cython 导入 OLAP 和图数据库模块，可以使用 Cython 的接口与 TuGraph 的 Procedure API 或 OLAP API 进行交互，具体模式依赖于需求，如事务模式、Plugin 模式、Embed 模式或 Standalone 模式。\""}
{"id": "TEST1-18", "output_field": "'unique'参数用于指定边的唯一性，确保同一类型的边在起点和终点之间只能存在一条。'pair_unique'参数则用于多个起点和终点的组合唯一性，确保特定起点和终点组成的边类型之间的唯一性。"}
{"id": "TEST1-19", "output_field": "图数据库相较于关系型数据库的优势体现在以下三个方面：1. 更灵活的数据模型（图结构 vs 表结构）。2. 更高效的复杂查询处理（基于点的视角和邻接点访问）。3. 更便捷的关系表示和操作（支持多层次和递归关系）。"}
{"id": "TEST1-20", "output_field": "\"是的，属性值太长了。\""}
{"id": "TEST1-21", "output_field": "\"404\""}
{"id": "TEST1-22", "output_field": "\"TuGraph 支持物理、虚拟和容器化环境，适用于 X86_64 和 ARM64 架构的平台。\""}
{"id": "TEST1-23", "output_field": "\"支持的空间数据类型包括 Point、Linestring 和 Polygon。\""}
{"id": "TEST1-24", "output_field": "\"主要属性名称由 primary 参数确定。\""}
{"id": "TEST1-25", "output_field": "“客户端可以向HA集群中的任意一个节点发送导入点边数据请求。”"}
{"id": "TEST1-26", "output_field": "“InvalidOperationException”"}
{"id": "TEST1-27", "output_field": "“GetVertexIndexIterator函数在liblgraph_python_api.Transaction中用于获取顶点索引迭代器。”"}
{"id": "TEST1-28", "output_field": "是的，可以指定错误继续执行和线程数。"}
{"id": "TEST1-29", "output_field": "“load_state_dict()”函数。"}
{"id": "TEST1-30", "output_field": "“UnauthorizedException”"}
{"id": "TEST1-31", "output_field": "当节点的出度大于0时，pagerank值初始化为1/出度。"}
{"id": "TEST1-32", "output_field": "\"CSV 和 JSON。\""}
{"id": "TEST1-33", "output_field": "\"检查配置文件和数据文件，确保它们的大小和格式正确；并确认TuGraph已正确安装。\""}
{"id": "TEST1-34", "output_field": "\"事务必须是串行的。\""}
{"id": "TEST1-35", "output_field": "栏位与配置文件中的 columns 对应关系是通过配置文件中的字段名称来匹配 CSV 文件中的列名。确保 CSV 文件的列名与配置文件中定义的 columns 一一对应。"}
{"id": "TEST1-36", "output_field": "在创建一个顶点标签时，需要指定以下参数：`label_name`、`primary_field` 和 `field_spec"}
{"id": "TEST1-37", "output_field": "默认端口号是 7687。"}
{"id": "TEST1-38", "output_field": "“计算图表中显示的值的方法是通过配置文件和命令行选项进行设置。”"}
{"id": "TEST1-39", "output_field": "\"TuGraph是由蚂蚁集团和清华大学共同研发的。\""}
{"id": "TEST1-40", "output_field": "\"图学习系统主要解决图数据的存储、流式计算、离线计算和图学习问题。\""}
{"id": "TEST1-41", "output_field": "`GetVertexByUniqueCompositeIndex`函数需要的参数是：点类型名称、唯一属性值。"}
{"id": "TEST1-42", "output_field": "\"在配置 TuGraph 的 RPC port 时，可以通过修改配置文件中的 `rpc_port` 参数来设置。\""}
{"id": "TEST1-43", "output_field": "\"灵活的图结构、快速的关系查询、良好的扩展性。\""}
{"id": "TEST1-44", "output_field": "“tugraph”。”"}
{"id": "TEST1-45", "output_field": "\"STRING\""}
{"id": "TEST1-46", "output_field": "“是的，DB和TuGraph Analytics是独立运行的。”"}
{"id": "TEST1-47", "output_field": "\"token\" 和 \"client_version\"（可选）。"}
{"id": "TEST1-48", "output_field": "使用`lgraph_cypher`工具在命令行中以单命令模式提交Cypher查询并保存结果的命令格式如下：\n\n```bash\nlgraph_cypher -c \"MATCH (n) RETURN n, n.name;\" > results.txt\n```"}
{"id": "TEST1-49", "output_field": "数据和日志目录的持久化位置在启动命令参数中通过 `--directory` 指定。"}
{"id": "TEST1-50", "output_field": "三种方式：节点ID、空间数据类型、属性查询。"}
{"id": "TEST1-51", "output_field": "\"方法 `SetField` 的目的是用于设置 Label 的字段定义，以提供点和边的具体数据格式。\""}
{"id": "TEST1-52", "output_field": "“TuGraph图数据库由蚂蚁集团与清华大学联合研发。”"}
{"id": "TEST1-53", "output_field": "精简运行环境需要的系统库主要包括：GCC、libstdc++、glibc，以及TuGraph的预编译库。"}
{"id": "TEST1-54", "output_field": "`SetFrontier`函数利用参数`root_vertex_filter`来筛选符合条件的顶点，返回一个满足该条件的顶点集合。"}
{"id": "TEST1-55", "output_field": "是的，rpm包中包含新版前端页面资源。"}
{"id": "TEST1-56", "output_field": "\"启动 tugraph-runtime-centos7 大概需要 2GB 内存和 2 个 CPU 核心。\""}
{"id": "TEST1-57", "output_field": "\"创建组合索引时，需要提供的参数有 label、field 和 type。\""}
{"id": "TEST1-58", "output_field": "`IndexAlreadyExistsException`。"}
{"id": "TEST1-59", "output_field": "“TuGraphClient 是 TuGraph 的客户端工具，用于连接和操作 TuGraph 数据库。”"}
{"id": "TEST1-60", "output_field": "\"TuGraph 支持多种硬件平台，包括 CPU、GPU 和分布式集群。\""}
{"id": "TEST1-61", "output_field": "是的，前两个参数的格式与执行导入脚本一样。"}
{"id": "TEST1-62", "output_field": "标签和属性为 `@edge` 和 `@property`。"}
{"id": "TEST1-63", "output_field": "\"发生溢出时，TuGraph会抛出异常并停止操作。\""}
{"id": "TEST1-64", "output_field": "\"TuGraph已安装且目标边标签存在。\""}
{"id": "TEST1-65", "output_field": "边权重的类型为 `EdgeData`。"}
{"id": "TEST1-66", "output_field": "RPC 是一种通过建立连接和服务存根以实现远程方法调用的通信协议。"}
{"id": "TEST1-67", "output_field": "“主键用于唯一标识数据库中的每一条记录，确保数据的完整性和一致性。”"}
{"id": "TEST1-68", "output_field": "\"RpcException是远程过程调用中的一种异常类型，用于处理RPC请求错误。\""}
{"id": "TEST1-69", "output_field": "支持。"}
{"id": "TEST1-70", "output_field": "“TuGraph 优化了 Antlr4 的 C++ Target，提升了并发性能超过 10 倍，32 线程的并发性能提升超过 18 倍。”"}
{"id": "TEST1-71", "output_field": "TuGraph 支持的节点和关系的标签数量没有严格限制，而 OpenCypher 对标签数量有一定限制，通常为 255 个。"}
{"id": "TEST1-72", "output_field": "“1”（表示成功）。"}
{"id": "TEST1-73", "output_field": "是的，TuGraph Analytics 目前不支持窗口函数。"}
{"id": "TEST1-74", "output_field": "字符串格式的执行结果。"}
{"id": "TEST1-75", "output_field": "\"通过调用 `setInitialBoundary` 函数来通过传入的过滤器设置初始边界。\""}
{"id": "TEST1-76", "output_field": "\"部署时间大约需要2分钟。\""}
{"id": "TEST1-77", "output_field": "\"图的基本元素包括点和边。\""}
{"id": "TEST1-78", "output_field": "\"支持 Python、C++、Java 和 RESTful API。\""}
{"id": "TEST1-79", "output_field": "使用以下调用获取存储过程响应的列表：\n\n```python\nr = requests.get('http://127.0.0.1:7071/db/school/cpp_plugin')\n```\n\n然后可以通过 `r.text` 获取存储过程的详细信息。"}
{"id": "TEST1-80", "output_field": "\"RPC接口是远程过程调用接口，允许开发者通过存根像调用本地方法一样向远程服务器发送请求。\""}
{"id": "TEST1-81", "output_field": "\"The Matrix\"参与了多种关系类型，包括角色关系、情节关系和主题关系。"}
{"id": "TEST1-82", "output_field": "```\n$ ./lgraph_server -d run -c lgraph.json --log_dir \"\"\n```  \n或者：  \n```\n$ ./lgraph_server -c lgraph.json --log_dir \"\"\n```  "}
{"id": "TEST1-83", "output_field": "如果在添加顶点时存在相同的unique_id，将会发生数据完整性检查失败，无法添加该顶点。"}
{"id": "TEST1-84", "output_field": "\"TuGraph 支持主流操作系统，包括 Ubuntu、CentOS、SUSE、银河麒麟、中标麒麟、UOS等。最稳定的系统版本是 Ubuntu 18.04、CentOS 7、CentOS 8。\""}
{"id": "TEST1-85", "output_field": "TuGraph-OGM通过将JAVA对象操作翻译为Cypher请求，支持JAVA开发人员进行图对象映射。"}
{"id": "TEST1-86", "output_field": "\"OPTIONAL MATCH 用于在 GQL 中进行可选模式匹配，返回所有匹配结果以及未匹配的节点和关系。\""}
{"id": "TEST1-87", "output_field": "通过参数 `readOnly` 控制存储过程是否为只读，设置为 `true` 表示只读。"}
{"id": "TEST1-88", "output_field": "\"RpcStatusException\"。"}
{"id": "TEST1-89", "output_field": "\"swap_id函数用于交换两个节点的ID。\""}
{"id": "TEST1-90", "output_field": "```\nMATCH (movie:Movie {title: 'Forrest Gump'})<-[:ACTS_IN]-(actor:Actor)\nRETURN actor.name AS Actor, actor.character AS Character;\n```"}
{"id": "TEST1-91", "output_field": "\"内置了6种基础算法。\""}
{"id": "TEST1-92", "output_field": "\"点（Point）、线（Line）、面（Polygon）。\""}
{"id": "TEST1-93", "output_field": "支持麒麟操作系统，仅企业版支持。"}
{"id": "TEST1-94", "output_field": "Point类型数据的格式为：每个点有一个主键（用户自定义的唯一标识）和一个自动分配的唯一ID（VID），并且可以具备多个属性，属性可以是不同类型的。"}
{"id": "TEST1-95", "output_field": "TuGraph嵌入模式的API允许用户执行增、删、查操作。"}
{"id": "TEST1-96", "output_field": "\"1970-01-01T00:00:00Z\""}
{"id": "TEST1-97", "output_field": "返回错误信息，指出 vertex_label 或 field 不存在。"}
{"id": "TEST1-98", "output_field": "使用命令行参数执行 Cypher 查询并显示为表格格式的命令格式如下：\n\n```bash\nlgraph_cypher -c \"MATCH (n) RETURN n, n.name;\"\n```"}
{"id": "TEST1-99", "output_field": "\"reduce_plus函数将两个参数进行逐元素相加，返回相加后的结果。\""}
{"id": "TEST1-100", "output_field": "“支持无向边。”"}
{"id": "TEST1-101", "output_field": "\"FieldData类提供多个构造函数，包括默认构造函数和接受数据路径的构造函数。\""}
{"id": "TEST1-102", "output_field": "TuGraph-DB通过其高效的图分析功能和实时数据处理能力，帮助用户在旅行时选择最佳路线。它支持大数据量的存储和低延迟的查询，使得用户能够快速获取和分析不同路线的属性和连接关系。此外，TuGraph的图可视化工具可以直观展示路线选择的结果，帮助用户做出更明智的决策。"}
{"id": "TEST1-103", "output_field": "\"exists()函数用于检查一个表达式是否存在。\""}
{"id": "TEST1-104", "output_field": "最低 CPU 配置为 8 个核心，建议 CPU 配置为 16 个核心。"}
{"id": "TEST1-105", "output_field": "\"MappedVid 函数用于对图数据进行筛选，选择有效的点边进行图结构的构建。\""}
{"id": "TEST1-106", "output_field": "会返回错误，提示边标签不匹配。"}
{"id": "TEST1-107", "output_field": "不是，批量在线导入不通过”CREATE (n), (m)“语句。"}
{"id": "TEST1-108", "output_field": "“lgraph_backup工具的主要功能是进行在线/离线的备份恢复。”"}
{"id": "TEST1-109", "output_field": "获取边的所有属性的方法是使用以下URI：\n\n```\nGET /db/{graph_name}/relationship/{euid}/property\n```"}
{"id": "TEST1-110", "output_field": "知识图谱的基本元素包括：`schema` 和 `files`。`schema`部分定义了标签、类型、属性等；`files`部分描述了导入的数据文件。"}
{"id": "TEST1-111", "output_field": "TuGraph-DB支持存储过程，支持的编程语言有C++、Python和Rust（仅v1）。"}
{"id": "TEST1-112", "output_field": "“GetEdgeProp操作的目的是获取边的属性信息。”"}
{"id": "TEST1-113", "output_field": "\"TuGraph-DB的主要功能包括图存储、图计算、图学习和图研发平台。\""}
{"id": "TEST1-114", "output_field": "\"会抛出异常信息。具体异常取决于错误类型。\""}
{"id": "TEST1-115", "output_field": "“预计在2024年度推出。”"}
{"id": "TEST1-116", "output_field": "支持的操作系统包括Ubuntu16.04, Ubuntu18.04, Ubuntu20.04和Centos7, Centos8，且需要GCC版本为8.4.0或更新的版本。"}
{"id": "TEST1-117", "output_field": "\"Cython.cimports.libcpp.unordered_map\" 是 Cython 中对 C++ 的 unordered_map 类型的引用，用于在 Cython 中使用无序映射。"}
{"id": "TEST1-118", "output_field": "“数据文件路径”和“数据类型”。"}
{"id": "TEST1-119", "output_field": "\"支持GQL语句。\""}
{"id": "TEST1-120", "output_field": "“log4j-core”的版本号是4.2.x，“guava”的版本号是4.2.x。"}
{"id": "TEST1-121", "output_field": "“SetUserGraphAccess”方法主要用于设置用户对图数据库的访问权限。"}
{"id": "TEST1-122", "output_field": "在TuGraph-DB中，运行单元测试时可以通过存储过程中的日志功能输出调试信息。对于C++存储过程，可使用`LOG_DEBUG()`、`LOG_INFO()`、`LOG_WARN()`和`LOG_ERROR()`宏来输出日志信息。对于Python存储过程，可以使用`print`函数，调试信息会以WARN等级的日志条目形式输出到日志文件。"}
{"id": "TEST1-123", "output_field": "一种使用 \"Nav\" 语句的情况是进行图遍历以获取邻接节点。"}
{"id": "TEST1-124", "output_field": "“通过pair unique索引查找关系边的接口为`GET /db/{graph_name}/relationship/{euid}`，需求是根据pair_unique的值更新对应的边数据时使用PUT方法。”"}
{"id": "TEST1-125", "output_field": "\"TuGraph Browser。\""}
{"id": "TEST1-126", "output_field": "主要采用随机行走方式来进行计算。"}
{"id": "TEST1-127", "output_field": "节点和边的属性在知识图谱中主要用于定义和描述图的数据模型，使得用户能够更清晰地管理、查询和分析图数据。"}
{"id": "TEST1-128", "output_field": "在TuGraph项目中，先提交一个issue可以确保代码变更有明确的目的和讨论，有助于团队协作和问题追踪。"}
{"id": "TEST1-129", "output_field": "\"社区版本与企业版本的差距主要在于功能支持、性能优化和技术支持服务。\""}
{"id": "TEST1-130", "output_field": "\"BFS算法的输出结果是从起始节点到每个其他节点的最短路径长度和路径信息。\""}
{"id": "TEST1-131", "output_field": "\"当 Key_start 和 Key_end 相等于 v 时，VertexIndexIterator 将会返回仅包含该顶点 v 的迭代器，操作会专注于与 v 相关的出边和入边集合。\""}
{"id": "TEST1-132", "output_field": "通过使用 INSERT 语句将顶点数据写入 TuGraph 数据库。具体格式为：\n\n```sql\nINSERT VERTEX <标签名> (属性1, 属性2, ...) VALUES (值1, 值2, ...);\n```"}
{"id": "TEST1-133", "output_field": "“lgraph_api::Transaction的作用是提供对数据库操作的事务管理，确保操作的一致性和原子性。”"}
{"id": "TEST1-134", "output_field": "\"会引发`ProcessVertexActiveException`异常。\""}
{"id": "TEST1-135", "output_field": "\"字符串格式直接返回存储过程的执行结果。\""}
{"id": "TEST1-136", "output_field": "“通常是 http://localhost:9090。”"}
{"id": "TEST1-137", "output_field": "“图计算和图分析任务。”"}
{"id": "TEST1-138", "output_field": "使用不同的字段名代替`id`，如`node_id`，以避免冲突。调用示例为：  \n```\nCALL db.upsertVertex('node1', [{node_id:1, name:'name1'},{node_id:2, name:'name2'}])\n```"}
{"id": "TEST1-139", "output_field": "```json\n{\n\"label\": \"DIRECT\",\n\"destination\": 14,\n\"property\": {}\n}\n```"}
{"id": "TEST1-140", "output_field": "可以通过查询点类型，并统一返回结构。使用 `olapondb.ntypes()` 获取点类型列表，然后根据需要构建统一的数据结构。"}
{"id": "TEST1-141", "output_field": "在基于ARM的机器（如Mac M1）上编译TuGraph时，可以使用以下CMake配置命令：\n\n```bash\ncmake -DCMAKE_TOOLCHAIN_FILE=path/to/your/arm/toolchain.cmake -DCMAKE_BUILD_TYPE=Release ..\n```\n\n确保替换`path/to/your/arm/toolchain.cmake`为实际的工具链文件路径。"}
{"id": "TEST1-142", "output_field": "单机的配置大致包括以下内容：\n\n- schema部分定义label，包含必选的label和type（VERTEX或EDGE），以及可选的properties。\n- files部分描述要导入的数据文件，包含必选的path和format（JSON或CSV），以及可选的header和label。\n- 索引长度限制：unique索引最大480bytes，pair_unique索引最大470bytes，非唯一索引（点）最大475bytes，非唯一索引（边）最大456bytes。"}
{"id": "TEST1-143", "output_field": "使用 PathTraversal 类可以查询两点间的一条通路。构造 PathTraversal 对象后，设置起始点和扩展方式，通过自定义过滤函数来判断路径的有效性。"}
{"id": "TEST1-144", "output_field": "支持通过Cypher形式修改schema，不支持通过Python形式修改schema。"}
{"id": "TEST1-145", "output_field": "TuGraph-Restful-Server 使用 Netty 框架支持其 HTTP 协议，主要功能包括提供图数据库的查询、管理和交互接口。"}
{"id": "TEST1-146", "output_field": "“禁用角色后，具有该角色的用户将失去该角色所赋予的权限。”"}
{"id": "TEST1-147", "output_field": "确保合法授权的方式是：在贡献内容前，确保您阅读并理解相关的许可证协议，并根据项目要求提交PR。同时，确保您的贡献是原创的或经过合法授权的。"}
{"id": "TEST1-148", "output_field": "使用以下命令清空数据而保留schema：\n\n```sql\nMATCH (n) DELETE n\n```"}
{"id": "TEST1-149", "output_field": "\"OGM在领域模型映射、查询与操作简化、注解驱动配置等方面类似于MyBatis。\""}
{"id": "TEST1-150", "output_field": "\"是的，BROWSER 支持 Docker 部署。\""}
{"id": "TEST1-151", "output_field": "是的，TuGraph-DB有数据导入工具，相关代码可以在`lgraph_import`工具中找到。"}
{"id": "TEST1-152", "output_field": "\"图数据库的独特优势包括：高效处理复杂关系、高效的点和边查询、良好的可扩展性、支持图遍历和灵活的数据模型。\""}
{"id": "TEST1-153", "output_field": "TuGraph 客户端 SDK 支持 C++、Python 和 Java 语言。"}
{"id": "TEST1-154", "output_field": "OGC定义的空间数据标准表示格式包括：  \n- WGS84坐标系（EPSG 4326）  \n- Cartesian坐标系（EPSG 7203）  "}
{"id": "TEST1-155", "output_field": "\"db.importor.dataImportor函数的目的是什么？\"  \n答案: \"用于导入数据至TuGraph数据库。\""}
{"id": "TEST1-156", "output_field": "\"TuGraph企业版是蚂蚁集团与清华大学联合研发的图数据库，构建了图存储、图计算、图学习等完善的图技术体系，主要面向金融、工业和政务服务等行业客户。\""}
{"id": "TEST1-157", "output_field": "“POST”方法和URI为“/cypher”。"}
{"id": "TEST1-158", "output_field": "“TuGraph基础算法包包含6个算法（社区版）和25个算法（商业版）。”"}
{"id": "TEST1-159", "output_field": "\"默认端口号是 8182。\""}
{"id": "TEST1-160", "output_field": "调用函数为 `/user/{user_name}/disable`，该函数在成功禁用用户时返回true。"}
{"id": "TEST1-161", "output_field": "\"不会丢失，TuGraph更新通常是向下兼容的。\""}
{"id": "TEST1-162", "output_field": "“null”"}
{"id": "TEST1-163", "output_field": "\"磁盘IO警报通常在磁盘使用率超过设定阈值时触发。\""}
{"id": "TEST1-164", "output_field": "\"InEdgeIterator 在调用 Close() 函数后会变为无效状态。\""}
{"id": "TEST1-165", "output_field": "“DUAL_DIRECTION”表示边的双向关系，即可以通过两个方向的边来模拟无向边的关系。在TuGraph中，用户需要手动创建两条相反方向的边，以实现双向连接。"}
{"id": "TEST1-166", "output_field": "如果指定的顶点ID不存在，并且nearest参数为true时，Goto函数将插入对应的顶点数据。"}
{"id": "TEST1-167", "output_field": "“最终返回的结果是发现的顶点数量。”"}
{"id": "TEST1-168", "output_field": "\"refresh_time\"的默认设置是30秒。"}
{"id": "TEST1-169", "output_field": "使用 `GetEdgeProp` 命令时，可以通过指定 `timestamp` 字段来查找特定的时间戳的边属性，格式为 `timestamp = '<具体时间>'`。"}
{"id": "TEST1-170", "output_field": "默认的端口号是“7687”。"}
{"id": "TEST1-171", "output_field": "支持，TuGraph内置30多种图分析算法。"}
{"id": "TEST1-172", "output_field": "存储过程接口包含以下重要组件和功能：\n- URI\n- METHOD\n- RESPONSE（包括存储过程名、描述、是否只读、代码及类型）"}
{"id": "TEST1-173", "output_field": "成功返回查询结果的字符串，失败返回错误信息的字符串。"}
{"id": "TEST1-174", "output_field": "使用OlapOnDB API抽取子图并实现图分析算法。"}
{"id": "TEST1-175", "output_field": "“filter_output_default函数的主要作用是用于过滤输出默认值的设置。”"}
{"id": "TEST1-176", "output_field": "\"在MyBatis Generator的XML配置文件中，targetProject应配置为目标项目的相对路径，通常为'${basedir}/src/main/java'。\""}
{"id": "TEST1-177", "output_field": "`class`注解指定的数据库字段名是`name`。"}
{"id": "TEST1-178", "output_field": "可以通过Cypher语句删除图中的重复关系。"}
{"id": "TEST1-179", "output_field": "\"第一次快照的时间默认设置为当前时间（now）。\""}
{"id": "TEST1-180", "output_field": "“您需要标注作品的来源、作者信息及版权状况。”"}
{"id": "TEST1-181", "output_field": "“返回所有的点边类型，以及每种类型当前的数据量。”"}
{"id": "TEST1-182", "output_field": "TuGraph-OGM支持将JAVA对象操作翻译为TuGraph的Cypher请求，并将结果转换为JAVA对象。"}
{"id": "TEST1-183", "output_field": "```python\nclient = liblgraph_client_python.client(\"http://localhost:7081\", \"default\")\n```"}
{"id": "TEST1-184", "output_field": "“INVALID_ARGUMENT”异常。"}
{"id": "TEST1-185", "output_field": "TuGraph的部署方式包括单机部署和集群部署。"}
{"id": "TEST1-186", "output_field": "根据查询语句 `MATCH (n:person) RETURN n.name ORDER BY n.name SKIP 1`，跳过第一行后返回的第一位人物的名字是第二个按名称排序的人的名字。"}
{"id": "TEST1-187", "output_field": "可以继续导入，如果使用 `--continue_on_error true` 参数。"}
{"id": "TEST1-188", "output_field": "使用 `setHeader()` 方法为表设置表头。"}
{"id": "TEST1-189", "output_field": "个人贡献者许可协议的主要目的是确保贡献者对其贡献的知识产权和使用权进行明确的授权，同时保护项目的使用、复制和修改权。"}
{"id": "TEST1-190", "output_field": "TuGraph Mini Runtime Image 不包含以下功能：\n- 内置 34 图分析算法\n- 基于 web 客户端的图可视化工具\n- 基于 C++/Python 的存储过程\n- 高性能批量导入\n- 在线/离线备份"}
{"id": "TEST1-191", "output_field": "主要使用的辅助函数包括：图遍历函数、图聚合函数、图过滤函数等。"}
{"id": "TEST1-192", "output_field": "“Authentication failed”和其他与密码规则相关的异常（如密码不符合复杂度要求、用户不存在等）。"}
{"id": "TEST1-193", "output_field": "使用 `liblgraph_python_api.Galaxy` 类创建一个新的用户账户的代码示例为：\n\n```python\ngalaxy = PyGalaxy(args.db_path)\ngalaxy.CreateUser(args.username, args.password)\n```"}
{"id": "TEST1-194", "output_field": "`drop_vertex_label()`。"}
{"id": "TEST1-195", "output_field": "用户在角色被禁用后将失去该角色的所有权限。"}
{"id": "TEST1-196", "output_field": "\"TuGraph Browser。\""}
{"id": "TEST1-197", "output_field": "\"TuGraph 配置文件通常位于 `conf` 目录下，文件名为 `tugraph.conf`。\""}
{"id": "TEST1-198", "output_field": "“设置为3000毫秒。”"}
{"id": "TEST1-199", "output_field": "\"展开当前前沿的操作可以使用的过滤函数类型包括：节点过滤函数、边过滤函数和路径过滤函数。\""}
{"id": "TEST1-200", "output_field": "\"UnsupportedOperationException\""}
{"id": "TEST1-201", "output_field": "\"模块通常放在 ./udf/python/ 目录下。\""}
{"id": "TEST1-202", "output_field": "\"资源名称对应的颜色设置为固定的“light-orange”的是“Film”。\""}
{"id": "TEST1-203", "output_field": "使用以下命令删除图库的数据：```CALL dbms.graph.deleteGraph('graph1')```"}
{"id": "TEST1-204", "output_field": "\"响应中将返回成功创建的边的数量和相关的结果信息。\""}
{"id": "TEST1-205", "output_field": "\"TuGraph选择使用B+树作为其底层存储数据结构，主要是为了支持高效的读性能及基于比较的索引值增删查改。\""}
{"id": "TEST1-206", "output_field": "\"json_format\" 参数设置支持两种格式：true（返回JSON格式），false（返回字符串格式）。"}
{"id": "TEST1-207", "output_field": "“可以通过使用session.load或session.loadALL方法查找节点，结合filter进行优化查询，或者使用session.queryForObject和session.query方法发送Cypher查询，灵活指定返回格式。”"}
{"id": "TEST1-208", "output_field": "在尝试将非整数类型的数据转换为整数类型时会抛出 std::bad_cast 异常。"}
{"id": "TEST1-209", "output_field": "是的，TuGraph-DB的存储引擎使用了KV数据库，基于LMDB构建。"}
{"id": "TEST1-210", "output_field": "需要稍等一段时间后刷新页面进行访问新旧版本的web切换。"}
{"id": "TEST1-211", "output_field": "TuGraph在进行大规模数据查询时对图数据进行了压缩。"}
{"id": "TEST1-212", "output_field": "TuGraph选择使用B+树作为其存储数据结构，主要原因是B+树在处理大规模数据时具有高效的查询和插入性能。"}
{"id": "TEST1-213", "output_field": "\"使用的boost库版本是1.75及以上。\""}
{"id": "TEST1-214", "output_field": "\"TuGraph适合需要处理图数据的企业用户、研究人员及开发者，尤其是在大数据分析和图计算领域。\""}
{"id": "TEST1-215", "output_field": "\"POST请求主要用于创建资源或提交数据。\""}
{"id": "TEST1-216", "output_field": "最低配置：ecs.r7a.xlarge或ecs.r6.xlarge。  \n建议配置：根据具体需求选择更高规格的实例。"}
{"id": "TEST1-217", "output_field": "\"构造函数会抛出异常。\""}
{"id": "TEST1-218", "output_field": "默认的 n_limit 参数值是 0。"}
{"id": "TEST1-219", "output_field": "\"节点的默认等待秒数是30秒。\""}
{"id": "TEST1-220", "output_field": "使用 XMLMAPPER 类型时，接口方法将通过 XML 映射文件定义 SQL 语句来实现，而在运行时将对应的 SQL 语句与 Mapper 接口的执行方法进行绑定。"}
{"id": "TEST1-221", "output_field": "“GCN模型的主要组成部分是图卷积层、激活函数和全连接层。”"}
{"id": "TEST1-222", "output_field": "\"使用的框架是Google Test。\""}
{"id": "TEST1-223", "output_field": "可以。"}
{"id": "TEST1-224", "output_field": "如果使用遗留接口，HA集群的snapshot将在2023年4月30日之后被删除。"}
{"id": "TEST1-225", "output_field": "TuGraph-DB目前支持ISO GQL查询语言，并计划支持Bolt协议。"}
{"id": "TEST1-226", "output_field": "没有。"}
{"id": "TEST1-227", "output_field": "使用以下命令创建一个新的角色并为其提供描述信息：\n\n```cypher\nCALL dbms.security.createRole(role_name::STRING, desc::STRING)\n```"}
{"id": "TEST1-228", "output_field": "“不支持任意长度路径。”"}
{"id": "TEST1-229", "output_field": "在Java运行时，targetProject在xml配置文件中应配置为图项目的名称。"}
{"id": "TEST1-230", "output_field": "不支持具体角色和工具的详细信息。"}
{"id": "TEST1-231", "output_field": "通过在 `CallGql` 接口中使用图名称参数来指定要查询的图的名称。"}
{"id": "TEST1-232", "output_field": "可以通过查询语句展示图中的属性值。"}
{"id": "TEST1-233", "output_field": "使用Java客户端连接TuGraph数据库与Neo4j驱动，可以通过以下步骤实现：\n\n1. 编译Java客户端代码：\n   ```shell\n   cd deps/tugraph-db-client-java\n   sh local_build.sh\n   ```\n\n2. 在代码中使用相应的TuGraph连接配置。"}
{"id": "TEST1-234", "output_field": "边类型 `edge1` 删除字段 `field1` 和 `field2` 后，相关的边属性数据将同步变更，可能导致查询不到这些边数据。"}
{"id": "TEST1-235", "output_field": "通过以下配置文件将\"actors.csv\"导入到TuGraph：\n\n```json\n{\n  \"schema\": [\n    {\n      \"label\": \"actor\",\n      \"type\": \"VERTEX\",\n      \"properties\": [\n        { \"name\": \"aid\", \"type\": \"STRING\" },\n        { \"name\": \"name\", \"type\": \"STRING\" }\n      ],\n      \"primary\": \"aid\"\n    }\n  ],\n  \"files\": [\n    {\n      \"path\": \"actors.csv\",\n      \"header\": 2,\n      \"format\": \"CSV\",\n      \"label\": \"actor\",\n      \"columns\": [\"aid\", \"name\"]\n    }\n  ]\n}\n```"}
{"id": "TEST1-236", "output_field": "创建新子图时需要的参数包括：子图的schema，以及子图里面所有的点边数据（csv或者json格式）。"}
{"id": "TEST1-237", "output_field": "通过导入后对比原始数据和导入的数据是否一致，可以使用数据库查询接口对两组数据进行检索和比较。确保在数据导入完成后（使用任务id查询导入进度），再执行数据对比操作。"}
{"id": "TEST1-238", "output_field": "\"返回值代表活跃点的数量。\""}
{"id": "TEST1-239", "output_field": "\"TuGraph Explorer 的功能可以在 TuGraph Browser 中找到。\""}
{"id": "TEST1-240", "output_field": "“创建成功的点的数量和详细信息。”"}
{"id": "TEST1-241", "output_field": "支持。"}
{"id": "TEST1-242", "output_field": "数据预热的主要目的是提高查询性能。"}
{"id": "TEST1-243", "output_field": "“返回边的源顶点的索引。”"}
{"id": "TEST1-244", "output_field": "\"OPTIONAL MATCH用于在查询中返回匹配的结果，即使没有找到匹配的节点或关系，也会返回结果，结果中未匹配的部分将显示为null。\""}
{"id": "TEST1-245", "output_field": "图数据库实例无法使用的情况包括：数据库路径错误、用户认证失败、数据库未启动、图数据未加载。"}
{"id": "TEST1-246", "output_field": "\"libglog.so\"。"}
{"id": "TEST1-247", "output_field": "\"当达到限制时，GetNumOutEdges函数会返回一个错误码，通常是'LIMIT_EXCEEDED'。\""}
{"id": "TEST1-248", "output_field": "在每次迭代中，BFS算法通过调用`g.ProcessVertexActive`函数来更新活跃顶点数量。该函数会处理当前活跃的顶点，并返回新激活的顶点数量。具体来说，`num_activations`变量在每次迭代中被更新，以反映当前活跃顶点的数量。"}
{"id": "TEST1-249", "output_field": "\"角色名的允许的最大长度是64字节。\""}
{"id": "TEST1-250", "output_field": "修改和启用角色的 HTTP 方法是：POST。"}
