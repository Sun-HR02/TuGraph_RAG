{"id": "TEST1-1", "output_field": "使用TuGraph数据库时，如果在添加边的操作中指定的值不包含在`value_dict`中，将使用默认值处理该属性。"}
{"id": "TEST1-2", "output_field": "\"Christopher Nolan\" 和 \"Corin Redgrave\"。"}
{"id": "TEST1-3", "output_field": "在 TuGraph 中，可以通过控制台的角色管理界面查看现有角色及其相关信息。如果希望通过 Cypher 查询，可以使用相关的内置过程或查询命令。"}
{"id": "TEST1-4", "output_field": "每个图项目最多可以存储2^(40)个点和2^(32)条边。每个点或边类型的属性数量最多为1024个。"}
{"id": "TEST1-5", "output_field": "TuGraph 4.3.2 镜像中没有 `setup.sh` 脚本可能是目录结构或文件变动造成的。请确认文件是否被移动或更名，并检查更新的文档以获取具体的路径信息。"}
{"id": "TEST1-6", "output_field": "没有参数可以直接控制 `.pid` 文件的生成路径。pid 文件默认生成在启动该进程的工作目录。"}
{"id": "TEST1-7", "output_field": "在使用ARM机器（如M1芯片的Mac）编译TuGraph时，应该执行的cmake命令为：  \n```bash\ncmake .. -DOURSYSTEM=centos -DENABLE_BUILD_ON_AARCH64=ON\n```"}
{"id": "TEST1-8", "output_field": "清理执行完成后需要清理的目录。"}
{"id": "TEST1-9", "output_field": "使用命令 `./lgraph_server -d start -c lgraph.json` 来启动 TuGraph。"}
{"id": "TEST1-10", "output_field": "TuGraph为提高解析速度进行的主要优化手段包括：基于完美哈希的图存储设计，以最优读取性能替代 LogN 查找操作，并对并发性能进行了优化，通过改变关键数据的 ownership 减少锁的依赖。"}
{"id": "TEST1-11", "output_field": "POST"}
{"id": "TEST1-12", "output_field": "分配一个ParallelBitset集合，用于表示所有点的状态是否激活。"}
{"id": "TEST1-13", "output_field": "数据字段\"data\" 要导入的文件内容，建议最大在 16MB 左右，最长不超过 17MB。"}
{"id": "TEST1-14", "output_field": "CSV和JSON。"}
{"id": "TEST1-15", "output_field": "TuGraph的调优除了使用EXPLAIN和PROFILE以外，还可以通过优化查询语句、调整索引、合理配置存储参数等方式进行。"}
{"id": "TEST1-16", "output_field": "`RpcSingleClient` 构造函数需要三个参数：`url`、`user` 和 `password"}
{"id": "TEST1-17", "output_field": "使用Cython导入与Olap和图数据库相关的模块的方式如下：\n\n- 导入Olap模块：`from cython.cimports.olap_base import *`\n- 导入图数据库模块：`from cython.cimports.lgraph_db import *`"}
{"id": "TEST1-18", "output_field": "'Unique'参数是指在某个边的字段上创建一个唯一索引，即该字段的值在所有边中必须唯一。而'pair_unique'参数则指在某个边的字段上创建一个成对唯一索引，即对于同一对起点和终点，该字段的值必须唯一。"}
{"id": "TEST1-19", "output_field": "性能更高、直观性更强、兼容性更好。"}
{"id": "TEST1-20", "output_field": "是的，属性值太长。TuGraph中unique索引key的最大长度是480字节，超过此长度的属性不能建立unique索引。"}
{"id": "TEST1-21", "output_field": "“404”。"}
{"id": "TEST1-22", "output_field": "TuGraph提供三种系统环境：编译环境、运行环境和精简运行环境。"}
{"id": "TEST1-23", "output_field": "Point、Linestring、Polygon。"}
{"id": "TEST1-24", "output_field": "主要属性名称由参数`primary_field`确定。"}
{"id": "TEST1-25", "output_field": "HA模式下的client只能向leader发送导入点边数据请求。"}
{"id": "TEST1-26", "output_field": "`TransactionExecutionException`。"}
{"id": "TEST1-27", "output_field": "VertexIndexIterator。"}
{"id": "TEST1-28", "output_field": "可以指定错误继续执行和线程数。"}
{"id": "TEST1-29", "output_field": "使用 `FindVertices` 函数。"}
{"id": "TEST1-30", "output_field": "\"AuthError\"。"}
{"id": "TEST1-31", "output_field": "在初始化每个节点的PageRank值时，如果节点的出度大于0，pagerank值将被设置为总节点数的倒数再除以该节点的出度。"}
{"id": "TEST1-32", "output_field": "CSV 和 JSON。"}
{"id": "TEST1-33", "output_field": "错误提示 \"reading beyond the array: required size=4, actual size=2\" 通常是因为在读取数据时所需的字节数超过了实际可用的字节数。建议检查：\n\n1. 数据文件是否存在损坏或被截断。\n2. 文件读取的代码逻辑，确保在操作之前已经正确检查和验证数据块的大小。\n3. 上传文件时的分片大小和偏移是否正确，确保与服务器的期望一致，特别是在使用 TuGraph 的上传文件接口时，需要核对分片大小和内容长度是否一致。\n\n特别注意文件的完整性及读取逻辑的正确性以免超出数组范围。"}
{"id": "TEST1-34", "output_field": "事务必须是只读的。"}
{"id": "TEST1-35", "output_field": "在使用 CSV 文件导入数据时，文件中的栏位通过配置文件中的 `columns` 字段进行对应。例如，对于 `actors.csv` 文件，其 `columns` 字段为 `[\"aid\", \"name\"]`，这意味着 CSV 文件中对应的列顺序应该是演员的 ID 和名字。"}
{"id": "TEST1-36", "output_field": "\"label_type, label_name, extra, field_spec...\" 这四个参数。"}
{"id": "TEST1-37", "output_field": "TuGraph Browser 的默认端口号是 7070。"}
{"id": "TEST1-38", "output_field": "通过任务管理中使用SQL+GQL的方式描述图计算的业务逻辑，实现计算图表中显示的值。"}
{"id": "TEST1-39", "output_field": "蚂蚁集团和清华大学联合研发。"}
{"id": "TEST1-40", "output_field": "图学习系统主要解决图结构数据的建模与分析问题，通过利用图中的拓扑信息和特征提取来揭示数据中的深层次关联，从而应用于预测、分类等任务。"}
{"id": "TEST1-41", "output_field": "需要以下参数：\n\n- label_name: string\n- field_values: std::vector<FieldData>\n- vertex (输出参数)"}
{"id": "TEST1-42", "output_field": "在C++中配置RPC端口涉及设置通道的URL时指定`rpc_port`，可以通过以下步骤实现：\n\n1. 定义URL，包含目标服务器的IP和RPC端口。\n2. 使用URL初始化RPC通道。\n\n例如：\n```C++\nstd::string url = \"http://${ip}:${rpc_port}\";\nstd::shared_ptr<lgraph_rpc::m_channel> channel = std::make_shared<lgraph_rpc::m_channel>();\nchannel->Init(url.c_str(), load_balancer, options.get());\n```\n\n注意将`${ip}`替换为服务器的IP地址，并将`${rpc_port}`替换为实际的RPC端口。"}
{"id": "TEST1-43", "output_field": "图数据库在处理关联关系时的优势包括：性能更高、直观性更强、兼容性更好。"}
{"id": "TEST1-44", "output_field": "73@TuGraph"}
{"id": "TEST1-45", "output_field": "列表（`list`）。"}
{"id": "TEST1-46", "output_field": "是的，DB和TuGraph Analytics是独立运行的。"}
{"id": "TEST1-47", "output_field": "`RpcClient`构造函数需要以下参数用于用户登录：url、user、password。"}
{"id": "TEST1-48", "output_field": "使用`lgraph_cypher`工具在命令行中以单命令模式提交一条Cypher查询并保存结果的命令示例如下：\n\n```shell\n$ ./lgraph_cypher.py -c /home/usr/lgraph_standalone.json -u user -P password -s \"MATCH (n) RETURN n\" > result.txt\n```"}
{"id": "TEST1-49", "output_field": "数据目录的默认持久化位置为`/var/lib/lgraph/data`，日志目录通过`log_dir`配置项指定。"}
{"id": "TEST1-50", "output_field": "在TuGraph的Traversal API中，对于遍历的起始点设置有三种方式：使用过滤条件找到点、从指定点集抽取属性、以及路径上的信息访问。这涉及到的方法主要包括`FindVertices`和`ExtractVertexData`。"}
{"id": "TEST1-51", "output_field": "\"SetField\" 方法的目的在于修改指定字段的属性或值。"}
{"id": "TEST1-52", "output_field": "由蚂蚁集团与清华大学联合研发。"}
{"id": "TEST1-53", "output_field": "精简运行环境：无系统库依赖。"}
{"id": "TEST1-54", "output_field": "函数 `SetFrontier(std::function<bool(VertexIterator&)> root_vertex_filter)` 利用参数 `root_vertex_filter` 用于过滤初始点集，只有满足 `root_vertex_filter` 条件的顶点才会被放入遍历的起始集合中。"}
{"id": "TEST1-55", "output_field": "新版前端页面资源是否包含在rpm包中，需要确认rpm包的具体内容，而辅助文本并未提及。因此，无法直接从文本中得知rpm包中是否包含新版前端页面资源。"}
{"id": "TEST1-56", "output_field": "镜像启动大约需要的资源没有明确说明，但通常启动一个TuGraph Docker容器，建议至少预留2GB内存和1个CPU核心以保证基本运行。"}
{"id": "TEST1-57", "output_field": "创建组合索引时，需要提供多个属性（不超过16个）的列表。"}
{"id": "TEST1-58", "output_field": "\"FieldNameConflictException\""}
{"id": "TEST1-59", "output_field": "TuGraphClient是TuGraph数据库提供的用于与数据库进行交互的客户端，支持通过多种语言的SDK发送Cypher请求，服务器以JSON形式返回数据。"}
{"id": "TEST1-60", "output_field": "支持 X86_64 和 ARM64 架构的平台。测试认证过的硬件平台包括 Intel、AMD、Kunpeng、Hygon、飞腾等。"}
{"id": "TEST1-61", "output_field": "是的，`importDataFromContent` 的前两个参数 `desc` 和 `data` 的格式与执行导入脚本时使用的格式一致。"}
{"id": "TEST1-62", "output_field": "OGM中用于表示类的映射为一个边类型的标签是“@EdgeEntity”。"}
{"id": "TEST1-63", "output_field": "溢出将抛出异常。"}
{"id": "TEST1-64", "output_field": "成功执行AlterEdgeLabelAddFields函数的条件是：指定的字段成功添加到现有的边标签中。"}
{"id": "TEST1-65", "output_field": "边权重是EdgeData类型。"}
{"id": "TEST1-66", "output_field": "RPC（远程过程调用）是一种通过网络请求远程计算机上的服务，而不需要了解底层网络技术的协议。"}
{"id": "TEST1-67", "output_field": "在TuGraph中，主键的作用是唯一标识图中的节点或边，确保数据完整性和快速查找。"}
{"id": "TEST1-68", "output_field": "\"RpcException\"通常指的是与RPC调用相关的异常，如连接问题或调用错误。在提供的代码中，有两个具体的异常类型：`RpcConnectionException`和`RpcStatusException`。"}
{"id": "TEST1-69", "output_field": "支持。可以通过 `SET` 语句在 `MATCH` 语句中设置多个属性。例如：\n\n```sql\nMATCH (n:Person {name: 'Michael Redgrave'})\nSET n.birthyear = 1908, n.nationality = 'British'\nRETURN n\n```\n\n在这个示例中，`MATCH` 语句匹配一个节点，然后通过 `SET` 批量修改该节点的多个属性。"}
{"id": "TEST1-70", "output_field": "TuGraph对Antlr4的性能改进主要体现在C++ Target的并发性能上，优化后性能提升超过10倍，特别是32线程环境下并发性能提升了超过18倍。"}
{"id": "TEST1-71", "output_field": "TuGraph中每个节点或关系必须且只能有一个标签，而OpenCypher中一个节点或关系可以有0到多个标签。"}
{"id": "TEST1-72", "output_field": "“true”"}
{"id": "TEST1-73", "output_field": "目前TuGraph-Analytics是不支持窗口函数。"}
{"id": "TEST1-74", "output_field": "字符串格式。"}
{"id": "TEST1-75", "output_field": "\"setStartEdgeFilter\"。"}
{"id": "TEST1-76", "output_field": "一键安装通常只需几分钟即可完成。"}
{"id": "TEST1-77", "output_field": "图的基本元素包括节点（顶点）和边。"}
{"id": "TEST1-78", "output_field": "TuGraph 支持 Java、C++、Python、Golang、JavaScript、Rust 等编程语言。"}
{"id": "TEST1-79", "output_field": "获取存储过程响应的列表可以通过以下方式实现：\n\n使用RESTful API发送GET请求到`/db/{graph_name}/cpp_plugin`或`/db/{graph_name}/python_plugin`的URI，接收返回的JSON格式的存储过程列表。"}
{"id": "TEST1-80", "output_field": "RPC接口是指远程过程调用接口，它允许开发者通过网络请求远程调用TuGraph提供的服务，而无需了解底层网络技术。"}
{"id": "TEST1-81", "output_field": "“acted_in”和“directed”类型的关系。"}
{"id": "TEST1-82", "output_field": "`./lgraph_server -d start -c lgraph.json`"}
{"id": "TEST1-83", "output_field": "如果在添加顶点时存在相同的unique_id，将会发生唯一性约束冲突，导致操作失败。"}
{"id": "TEST1-84", "output_field": "支持 X86_64 和 ARM64 架构。"}
{"id": "TEST1-85", "output_field": "TuGraph-OGM支持将JAVA对象（POJO）映射到TuGraph中，类映射为节点，类的集合映射为边，类的属性映射为图对象的属性，并提供对应的函数操作数据库，兼容Neo4j-OGM，方便JAVA开发人员在图数据库中进行操作。"}
{"id": "TEST1-86", "output_field": "`OPTIONAL MATCH`在GQL中用于匹配图模式，如果未命中匹配则返回`null`。"}
{"id": "TEST1-87", "output_field": "在`loadProcedure`方法中，通过布尔参数`readOnly`控制存储过程是否为只读。"}
{"id": "TEST1-88", "output_field": "\"RpcStatusException\"。"}
{"id": "TEST1-89", "output_field": "\"交换两个顶点的ID。\""}
{"id": "TEST1-90", "output_field": "使用以下Cypher查询语言可查询影片'Forrest Gump'的所有演员以及他们扮演的角色：\n\n```\nMATCH (m:movie {title: 'Forrest Gump'})<-[r:acted_in]-(a:person) RETURN a.name, r.role\n```"}
{"id": "TEST1-91", "output_field": "六种基础算法。"}
{"id": "TEST1-92", "output_field": "Point、Linestring、Polygon。"}
{"id": "TEST1-93", "output_field": "开源和企业版都支持。"}
{"id": "TEST1-94", "output_field": "在TuGraph-DB中，Point类型数据使用EWKB格式定长存储50。"}
{"id": "TEST1-95", "output_field": "动态加载、更新和删除存储过程。"}
{"id": "TEST1-96", "output_field": "\"Date\"类的默认构造函数设置的日期是“1970-01-01”。"}
{"id": "TEST1-97", "output_field": "如果使用 `bool DeleteVertexIndex` 函数时给定的 `vertex_label` 或 `field` 不存在，会返回`false`。"}
{"id": "TEST1-98", "output_field": "使用单命令模式在命令行中执行一条 Cypher 查询并将结果显示为表格格式，可以使用以下命令：\n\n```shell\n./lgraph_cypher.py -c /home/usr/lgraph_standalone.json -u user -P password -s \"MATCH (n) RETURN n\"\n```"}
{"id": "TEST1-99", "output_field": "`reduce_plus`函数用于将两个参数进行累加操作。"}
{"id": "TEST1-100", "output_field": "支持无向边，语法为 `-[edge]-`。"}
{"id": "TEST1-101", "output_field": "FieldData类提供多个构造函数来初始化不同类型的数据。"}
{"id": "TEST1-102", "output_field": "TuGraph通过其高效的图计算功能和内置的图分析算法，可以帮助旅行者分析和选择最佳路线。通过处理大数据量和复杂的关系网络，TuGraph能够快速找到最优路径，并支持实时响应和复杂查询，从而解决旅行时选择路线的烦恼。"}
{"id": "TEST1-103", "output_field": "用于检查顶点或边是否具有指定字段。"}
{"id": "TEST1-104", "output_field": "最低CPU配置为4个核心，建议CPU配置以实际硬件条件为准。"}
{"id": "TEST1-105", "output_field": "\"MappedVid函数\"用于将实际的顶点ID映射到内部使用的顶点ID。"}
{"id": "TEST1-106", "output_field": "“返回错误提示信息或状态码。”"}
{"id": "TEST1-107", "output_field": "通过批量在线导入数据到TuGraph中，不是使用\"CREATE (n), (m)\"，而是使用`lgraph_import --online true`命令来实现在线增量导入或全量导入。"}
{"id": "TEST1-108", "output_field": "数据备份和恢复。\n"}
{"id": "TEST1-109", "output_field": "要获取某个节点的所有属性，可以使用以下方法和URI：\n\n- **方法**: GET\n- **URI**: `http://{host}:{port}/db/{graph_name}/node/{vid}`\n\n通过此URI和方法，可以获取指定节点的属性值。"}
{"id": "TEST1-110", "output_field": "知识图谱的基本元素包括顶点（表示数据中的实体）和边（表示实体之间的关系）。"}
{"id": "TEST1-111", "output_field": "支持存储过程。支持的编程语言包括C++、Python和Rust。"}
{"id": "TEST1-112", "output_field": "获取边属性操作的目的是提取边的元数据信息。"}
{"id": "TEST1-113", "output_field": "TuGraph-DB的主要功能包括：\n\n- 标签属性图模型\n- 完善的 ACID 事务处理\n- 内置 34 图分析算法\n- 支持全文/主键/二级索引\n- OpenCypher 图查询语言\n- 基于 C++/Python 的存储过程\n- 支持多图\n- 基于 web 客户端的图可视化工具\n- 支持 RESTful API 和 RPC\n- 适用于高效图算法开发的 Traversal API"}
{"id": "TEST1-114", "output_field": "“RpcStatusException”."}
{"id": "TEST1-115", "output_field": "2024年3月。"}
{"id": "TEST1-116", "output_field": "支持C++17标准。"}
{"id": "TEST1-117", "output_field": "`cython.cimports.libcpp.unordered_map` 是 Cython 中用于导入 C++ 标准库中 `unordered_map` 容器的模块。`unordered_map` 是一种哈希表数据结构，提供键值对的存储和快速查找功能。"}
{"id": "TEST1-118", "output_field": "“-d {db_dir}”和“-g {graph_list}”。"}
{"id": "TEST1-119", "output_field": "支持GQL语句。"}
{"id": "TEST1-120", "output_field": "抱歉，提供的辅助文本中没有涉及“log4j-core”和“guava”的版本号信息。请提供相关的配置信息或文档。"}
{"id": "TEST1-121", "output_field": "设置用户对特定图的访问权限。"}
{"id": "TEST1-122", "output_field": "在运行单元测试过程中输出日志，可以在C++存储过程中使用提供的log宏进行调试信息输出。调试信息将输出到服务器日志文件中。"}
{"id": "TEST1-123", "output_field": "利用“Nav”语句进行查询的一种情况是查询图中的路径，例如查找一个节点到目标节点的最短路径。"}
{"id": "TEST1-124", "output_field": "提供用于根据pair_unique值更新特定边数据的接口是通过`upsertEdge`实现的。使用`db.upsertEdge`可以通过指定pair_unique索引进行边的更新或插入操作。你可以通过调用以下方式实现：\n``` \nCALL db.upsertEdge('edge1',{type:'node1',key:'node1_id'}, {type:'node2',key:'node2_id'}, [{node1_id:1,node2_id:2,score:10}])\n```\n并预先为edge类型添加所需的pair unique索引：\n```\nCALL db.addEdgeIndex('edge1', 'score', false, true)\n```"}
{"id": "TEST1-125", "output_field": "TuGraph Browser 是 TuGraph 提供的可视化工具。"}
{"id": "TEST1-126", "output_field": "从非Sybil节点开始进行提前终止的随机游走。"}
{"id": "TEST1-127", "output_field": "节点和边的属性在知识图谱中用于表达实体（节点）和实体之间关系（边）的详细特性和信息。例如，节点可以描述一个实体的名称、地理位置，而边可以反映关系的权重或类型，这使得数据关系更加丰富和有意义。"}
{"id": "TEST1-128", "output_field": "在提交代码前先提交一个 issue 的原因是：避免与其他开发者或项目计划产生冲突，确保必要性并减少重复工作。"}
{"id": "TEST1-129", "output_field": "社区版本与企业版本的主要差距在于企业版支持更完善的商业化功能，包括分布式集群架构、属性级别的权限控制、以及更全面的专家支持服务。"}
{"id": "TEST1-130", "output_field": "`bfs_standalone`程序的输出结果为：\n\n```\nprepare_cost = 0.10(s)\ncore_cost = 0.02(s)\nfound_vertices = 3829\noutput_cost = 0.00(s)\ntotal_cost = 0.11(s)\nDONE.\n```"}
{"id": "TEST1-131", "output_field": "返回指向 field 值为 v 的点的迭代器。"}
{"id": "TEST1-132", "output_field": "可以使用`CREATE GRAPH`语句，定义顶点并使用ID作为主键。例如：\n\n```sql\nCREATE GRAPH example_graph (\n    Vertex vertex_name (\n        id bigint ID,\n        attribute_name data_type\n    )\n) WITH (\n    storeType = 'rocksdb'\n);\n```"}
{"id": "TEST1-133", "output_field": "`lgraph_api::Transaction` 用于在数据库中管理事务操作。在TuGraph中，它通常用于执行查询和更新操作时，确保数据一致性和支持并发控制。"}
{"id": "TEST1-134", "output_field": "`std::runtime_error`异常。"}
{"id": "TEST1-135", "output_field": "字符串格式。"}
{"id": "TEST1-136", "output_field": "请参考官网: [https://prometheus.io/docs/introduction/first_steps](https://prometheus.io/docs/introduction/first_steps)。"}
{"id": "TEST1-137", "output_field": "TuGraph图分析引擎主要面向全图/全量数据分析类的任务。"}
{"id": "TEST1-138", "output_field": "当表内属性字段名为`id`时，应设置字段`primary`为`id`，确保`primary`是这个点的主键属性，以避免报错。"}
{"id": "TEST1-139", "output_field": "在代码示例中，通过`alice.actsIn(speed);`这行代码用于创建边标签\"DIRECT\"。"}
{"id": "TEST1-140", "output_field": "确保返回可视化页面的结构一致，可以使用字段别名来统一数据结构。例如：\n\n```sql\nMATCH (n {name: 'Carrie-Anne Moss'})\nRETURN n.name AS name, n.age AS age\n```\n\n这样可以返回：\n\n```json\n[{\"name\": \"Carrie-Anne Moss\", \"age\": 34}]\n```\n\n通过使用别名可以确保返回的数据结构一致，即使字段来源不同。"}
{"id": "TEST1-141", "output_field": "使用CMake为Mac M1（ARM架构）配置TuGraph，建议拉取并使用TuGraph提供的 `tugraph-compile-centos7` 镜像，该镜像支持 `linux/arm64/v8` 架构，适用于M1芯片。通过Docker环境进行编译是一个有效的解决方案。"}
{"id": "TEST1-142", "output_field": "单机的建议配置是：CPU 64 Cores，内存 512GB，外存 2TB NVMe SSD，操作系统 CentOS 7.3。"}
{"id": "TEST1-143", "output_field": "\"使用 `algo.allShortestPaths` 函数。例如：`MATCH (n1 {name:'Corin Redgrave'}), (n2 {name:'Liam Neeson'}) CALL algo.allShortestPaths(n1,n2) YIELD nodeIds,relationshipIds,cost RETURN nodeIds,relationshipIds,cost`。\""}
{"id": "TEST1-144", "output_field": "不支持直接通过Cypher或Python修改schema。"}
{"id": "TEST1-145", "output_field": "TuGraph-Restful-Server 使用 brpc 框架支持其HTTP协议，主要功能包括文件上传、数据导入、导入进度查询、cypher查询和文件删除。"}
{"id": "TEST1-146", "output_field": "禁用角色后，具有该角色的用户将不再拥有该角色赋予的权限。"}
{"id": "TEST1-147", "output_field": "在贡献代码之前，请确保阅读并同意[个人贡献者许可协议](3.individual-cla.md)或[公司贡献者许可协议](4.corporate-cla.md)。"}
{"id": "TEST1-148", "output_field": "“CALL db.dropAllVertex()”"}
{"id": "TEST1-149", "output_field": "\"OGM在以下方面类似于MyBatis：都提供对象映射功能，将数据库数据映射为Java对象，简化数据库操作。\""}
{"id": "TEST1-150", "output_field": "TuGraph Browser 支持通过 Docker 部署。"}
{"id": "TEST1-151", "output_field": "有，TuGraph 有数据导入工具 `lgraph_import` 和 TuGraph DataX。相关代码可以参考 [https://github.com/TuGraph-db/DataX](https://github.com/TuGraph-db/DataX)。"}
{"id": "TEST1-152", "output_field": "性能、直观性和兼容性。"}
{"id": "TEST1-153", "output_field": "TuGraph 客户端 SDK 支持的编程语言是 Java、Python、C++。"}
{"id": "TEST1-154", "output_field": "EWKT（extended well known text）和EWKB（extended well known binary）。"}
{"id": "TEST1-155", "output_field": "用于执行数据的导入操作。"}
{"id": "TEST1-156", "output_field": "TuGraph企业版是商业化解决方案，支持分布式集群架构，提供一站式图平台和多种部署形态，并包括专家支持服务。"}
{"id": "TEST1-157", "output_field": "GET 方法, URI 为 `/db/{graph_name}/cpp_plugin|python_plugin`。"}
{"id": "TEST1-158", "output_field": "TuGraph基础算法包包含以下6个基础算法：广度优先搜索（BFS）、单源最短路径（SSSP）、全对最短路径（APSP）、多源最短路径（MSSP）、集合用算法。"}
{"id": "TEST1-159", "output_field": "默认端口号是7070。"}
{"id": "TEST1-160", "output_field": "调用函数 `CALL dbms.security.disableRole(role::STRING,disable::BOOLEAN)` 可以对一个角色进行禁用。当 `disable` 参数为 `true` 时，函数返回 `true`。"}
{"id": "TEST1-161", "output_field": "原库的数据不会丢失，但需要根据不同情况选择适当的数据迁移方案来保障数据的完整性和安全。"}
{"id": "TEST1-162", "output_field": "\"null\"。"}
{"id": "TEST1-163", "output_field": "磁盘IO警报通常是在系统监控过程中，当写入和读取操作导致的磁盘IO异常增高到某个阈值时触发。这可能与未启用持久化或持久化配置不当导致的过度IO操作有关。"}
{"id": "TEST1-164", "output_field": "\"无效状态。\""}
{"id": "TEST1-165", "output_field": "DUAL_DIRECTION 表示输入文件为非对称图，加载图为非对称图。"}
{"id": "TEST1-166", "output_field": "返回错误，指示顶点ID不存在。"}
{"id": "TEST1-167", "output_field": "遍历点个数。"}
{"id": "TEST1-168", "output_field": "\"60秒\""}
{"id": "TEST1-169", "output_field": "在GetEdgeProp命令中查找特定时间戳的边属性，可以通过指定边表中的时间戳字段来过滤结果。具体如何指定取决于您的查询语法，如果在Cypher查询中，通常使用WHERE子句来过滤指定时间戳的记录。例如：\n\n```\nMATCH (a)-[e:edge_label]->(b)\nWHERE e.timestamp = <specific_timestamp>\nRETURN e.property_name\n```"}
{"id": "TEST1-170", "output_field": "默认端口号是7070。"}
{"id": "TEST1-171", "output_field": "是的，TuGraph支持运行图算法。内置34个图分析算法。"}
{"id": "TEST1-172", "output_field": "Python存储过程接口包含的关键组件和功能包括：编写和调用存储过程、加载存储过程、列举存储过程，以及获取存储过程的详细信息。其中，Python存储过程返回一个包含执行成功状态和结果的tuple；可用的功能还包括通过RPC客户端调用和列举存储过程，支持在单机和HA模式下运行。"}
{"id": "TEST1-173", "output_field": "若 `CallGql` 函数操作成功，则返回 `true`；若失败，则返回 `false`。"}
{"id": "TEST1-174", "output_field": "在TuGraph中，复杂图分析操作可以通过其图分析引擎执行，用户可以借助C++或Python的图分析引擎API来快速导出待处理的子图，运行诸如BFS、PageRank、LPA、WCC等迭代式图算法。执行过程支持内存中并行处理，能实现近实时的分析。"}
{"id": "TEST1-175", "output_field": "`filter_output_default`函数的主要作用是用于指定数据写入的规则，待写入的数据需要满足该函数的要求。"}
{"id": "TEST1-176", "output_field": "MyBatis Generator的XML配置文件中`targetProject`的配置应为一个指向生成文件的目录路径。可以是相对于项目的路径或绝对路径，用于指定生成的Java文件应存放的位置。"}
{"id": "TEST1-177", "output_field": "\"数据库字段名为 `class`。\""}
{"id": "TEST1-178", "output_field": "可以，使用MATCH和DELETE语句结合来实现。"}
{"id": "TEST1-179", "output_field": "默认情况下，第一次快照的时间设置为“立即”。"}
{"id": "TEST1-180", "output_field": "标注作品的来源和遵守贡献者许可协议。"}
{"id": "TEST1-181", "output_field": "查询结果不同可能是由于索引的存在或缺失导致的。通过对点类型添加适当的索引可以提高查询性能，并且保证查询结果的一致性。请检查是否为相关字段添加了正确的索引。"}
{"id": "TEST1-182", "output_field": "TuGraph-OGM支持将JAVA对象（POJO）映射到TuGraph中，其中类映射为节点、集合映射为边、属性映射为图对象的属性，并提供图数据库操作函数。同时，TuGraph-OGM兼容Neo4j-OGM，便于用户无缝迁移。"}
{"id": "TEST1-183", "output_field": "```python\nclient = liblgraph_client_python.client(\"127.0.0.1:19099\", \"admin\", \"73@TuGraph\")\n```"}
{"id": "TEST1-184", "output_field": "抛出 `InvalidRoleNameException`。"}
{"id": "TEST1-185", "output_field": "云部署、Docker部署、安装包部署。"}
{"id": "TEST1-186", "output_field": "“Corin Redgrave”"}
{"id": "TEST1-187", "output_field": "可以设置参数 `continueOnError` 为 `true`，以在导入过程中遇到错误时继续导入。"}
{"id": "TEST1-188", "output_field": "使用 `SetHeader` 方法设置表头。"}
{"id": "TEST1-189", "output_field": "主要目的是规定贡献者在项目中的使用权限和责任，确保贡献的代码可以被安全地用于项目中。"}
{"id": "TEST1-190", "output_field": "TuGraph Mini Runtime Image 不包含Java、Python相关功能及C++插件编译运行功能。"}
{"id": "TEST1-191", "output_field": "Procedure及Embed主要使用的辅助函数包括：`OlapOnDB<EdgeData>`，`ParallelVector<VertexData>`，`ParallelBitset`，`AdjUnit/AdjUnit<Empty>`，`AdjList<EdgeData>`。"}
{"id": "TEST1-192", "output_field": "可能会被抛出的异常包括：“Authentication failed”等。"}
{"id": "TEST1-193", "output_field": "调用 `dbms.security.createUser(user_name, password)` 方法即可。例如：\n\n```plaintext\nCALL dbms.security.createUser('new_user', 'new_password')\n```"}
{"id": "TEST1-194", "output_field": "`db.deleteLabel('vertex', '标签名')`"}
{"id": "TEST1-195", "output_field": "禁用角色后，用户将从该角色中获得\"无权限\"（NONE）。"}
{"id": "TEST1-196", "output_field": "TuGraph的可视化监控主要使用了Prometheus和Grafana。"}
{"id": "TEST1-197", "output_field": "TuGraph 服务读取其配置的文件是服务器配置文件，格式为 JSON。"}
{"id": "TEST1-198", "output_field": "辅助文本中未提供`StudentMapper`接口中`selectVertex`方法的超时设置信息。请检查相关文档或配置以获取具体的超时设置。"}
{"id": "TEST1-199", "output_field": "可以使用面向点的用户自定义过滤函数（vertex_filter）和面向边的用户自定义过滤函数（out_edge_filter）。"}
{"id": "TEST1-200", "output_field": "只读交易中调用函数时会抛出 `ReadOnlyException`。"}
{"id": "TEST1-201", "output_field": "“tugraph-db/procedures/” 目录。"}
{"id": "TEST1-202", "output_field": "“movie”。"}
{"id": "TEST1-203", "output_field": "要删除导入图库的数据，可以使用以下命令清空所有的点边数据和图schema：\n\n```\nCALL db.dropDB()\n```"}
{"id": "TEST1-204", "output_field": "“200 OK”。"}
{"id": "TEST1-205", "output_field": "TuGraph选择B+树作为底层存储数据结构，主要是因为B+树具有较好的顺序读写性能。"}
{"id": "TEST1-206", "output_field": "可以通过设置参数 `jsonFormat`（或 `json_format`）来指定返回结果的格式，设置为 `true` 返回 JSON 格式，否则为字符串格式。"}
{"id": "TEST1-207", "output_field": "通过使用 `WITH` 语句将查询条件向下传递，可以提高查询效率。例如，将以下查询：\n\n```cypher\nMATCH (n1),(n2) CALL algo.allShortestPaths(n1,n2)\nYIELD nodeIds,relationshipIds,cost\nWHERE id(n1) IN [0] AND id(n2) IN [3938]\nRETURN nodeIds,relationshipIds,cost\n```\n\n优化为：\n\n```cypher\nMATCH (n1) WHERE id(n1) IN [0] WITH n1\nMATCH (n2) WHERE id(n2) IN [3938] WITH n1, n2\nCALL algo.allShortestPaths(n1,n2) YIELD nodeIds,relationshipIds,cost\nRETURN nodeIds,relationshipIds,cost\n```\n\n这样可以减少不必要的节点匹配，提高查询效率。"}
{"id": "TEST1-208", "output_field": "当 FieldData 类中的 integer() 方法试图转换非整数类型的数据时，会抛出 std::bad_cast 异常。"}
{"id": "TEST1-209", "output_field": "是的，TuGraph-DB的存储引擎使用了KV数据库，基于LMDB构建。"}
{"id": "TEST1-210", "output_field": "通过修改配置文件\"/usr/local/etc/lgraph.json\"中的\"web\"参数来进行新旧版本的Web切换。对于老版本，设置为\"/usr/local/share/lgraph/resource\"；对于新版本，设置为\"/usr/local/share/lgraph/browser-resource\"。之后执行`docker restart tugraph`使更改生效。"}
{"id": "TEST1-211", "output_field": "TuGraph进行大规模数据查询时没有提到对图数据进行压缩。"}
{"id": "TEST1-212", "output_field": "TuGraph选择使用B+树作为其存储数据结构，主要原因是其具有较好的顺序读写性能。"}
{"id": "TEST1-213", "output_field": "TuGraph-DB 使用的 boost 库版本是 1.68.0。"}
{"id": "TEST1-214", "output_field": "TuGraph适合新手、系统开发者、生产运维人员、研究人员、金融、工业、政务服务等行业用户。"}
{"id": "TEST1-215", "output_field": "POST 请求用于创建实体，提交 Cypher，以及加载和调用存储过程。"}
{"id": "TEST1-216", "output_field": "最低外存没有明确规定，建议外存为实际数据大小的4倍。"}
{"id": "TEST1-217", "output_field": "如果指定的目录不存在，TuGraph的构造函数会尝试创建该目录。"}
{"id": "TEST1-218", "output_field": "`GetNumOutEdges` 方法的 `n_limit` 参数默认值是 `-1`。"}
{"id": "TEST1-219", "output_field": "默认等待秒数是60。"}
{"id": "TEST1-220", "output_field": "实现XMLMAPPER类型的接口方法，通常涉及对TuGraph中现有的描述性（如Cypher）和过程性（如Procedure API）查询语言的综合应用。具体实现方案包括针对查询和数据操作的封装，以便与Mapper接口进行集成。在TuGraph环境中，两者结合可以通过结合上述服务端接口中的描述式和过程式图查询语言来优化查询执行和数据操作。"}
{"id": "TEST1-221", "output_field": "GCN模型的主要组成部分是两层图卷积（Graph Convolution）和一个Dropout层。"}
{"id": "TEST1-222", "output_field": "Google Test框架。"}
{"id": "TEST1-223", "output_field": "是的，可以。"}
{"id": "TEST1-224", "output_field": "快照的删除时机可能不在文档中明确说明，但通常它们会依据系统配置和资源管理策略自动进行。具体删除快照的条件或设置，建议查看TuGraph的相关文档或配置文件。"}
{"id": "TEST1-225", "output_field": "目前支持Cypher查询语言，计划支持ISO GQL查询语言。"}
{"id": "TEST1-226", "output_field": "TuGraph中开启事务用`BEGIN`，结束事务用`COMMIT`或`ROLLBACK`。"}
{"id": "TEST1-227", "output_field": "使用以下命令创建一个新的角色，并为其提供描述信息：\n\n```cypher\nCALL dbms.security.createRole(role_name::STRING, desc::STRING)\n```"}
{"id": "TEST1-228", "output_field": "不支持任意长度路径。"}
{"id": "TEST1-229", "output_field": "在配置文件中，`targetProject` 的配置不是在 XML 中，而是在 `pom.xml` 里用于 Maven 项目的构建。如果在 `pom.xml` 中配置相关依赖项，可以通过 `<artifactId>`、`<groupId>` 和 `‹version>` 来定义构建目标。"}
{"id": "TEST1-230", "output_field": "在2024年的功能更新计划中，TuGraph将支持\"HA支持Witness角色和管理工具\"。"}
{"id": "TEST1-231", "output_field": "在调用 \"CallGql\" 接口时，可以通过参数 `graph` 指定要查询的图的名称。"}
{"id": "TEST1-232", "output_field": "是的，TuGraph支持在图中展示属性值。"}
{"id": "TEST1-233", "output_field": "TuGraph数据库兼容Neo4j的通讯协议，因此可以使用Neo4j的Bolt驱动连接TuGraph的server。"}
{"id": "TEST1-234", "output_field": "可能查询不到数据的原因是没有正确地使用参数化查询或者没有正确地建立唯一索引。在使用批量upsert边数据时，确保为边的某个属性添加了“pair unique”索引以保证正确查询。可以通过以下步骤检查或纠正：\n\n1. 确保导入时使用了参数化特性。\n2. 为属性（如`score`）添加“pair unique”索引：\n   ``` \n   CALL db.addEdgeIndex('edge1', 'score', false, true) \n   ```"}
{"id": "TEST1-235", "output_field": "在\"TuGraph-DataX\"项目中，通过job配置文件将\"actors.csv\"导入到TuGraph，可以参考以下配置文件：\n\n```json\n{\n  \"job\": {\n    \"setting\": {\n      \"speed\": {\n        \"channel\": 1\n      }\n    },\n    \"content\": [\n      {\n        \"reader\": {\n          \"name\": \"txtfilereader\",\n          \"parameter\": {\n            \"path\": [\"actors.csv\"],\n            \"encoding\": \"UTF-8\",\n            \"column\": [\n              {\"index\": 0, \"type\": \"string\"},\n              {\"index\": 1, \"type\": \"string\"}\n            ],\n            \"fieldDelimiter\": \",\"\n          }\n        },\n        \"writer\": {\n          \"name\": \"tugraphwriter\",\n          \"parameter\": {\n            \"url\": \"bolt://127.0.0.1:27687\",\n            \"username\": \"admin\",\n            \"password\": \"73@TuGraph\",\n            \"schema\": {\n              \"label\": \"actor\",\n              \"type\": \"VERTEX\",\n              \"properties\": [\n                {\"name\": \"aid\", \"type\": \"STRING\"},\n                {\"name\": \"name\", \"type\": \"STRING\"}\n              ],\n              \"primary\": \"aid\"\n            }\n          }\n        }\n      }\n    ]\n  }\n}\n```\n\n这个配置文件指定了DataX使用\"txtfilereader\"读取\"actors.csv\"，并通过\"tugraphwriter\"将数据导入TuGraph中，创建了名为\"actor\"的顶点。"}
{"id": "TEST1-236", "output_field": "名称（name）和配置（config）。"}
{"id": "TEST1-237", "output_field": "在`test_export_default`函数中，可以通过以下步骤验证导出后再次导入的数据是否与原始数据一致：\n\n1. 使用`lgraph_export`命令导出原始数据。\n2. 使用导出的文件通过`lgraph_import`命令重新导入数据到一个新的图数据库实例中。\n3. 查询并比较新导入的数据与原始数据，验证点和边的数量及属性是否相同。\n4. 使用断言（assert）确认导入的数据与原始数据一致。\n\n例如，可以通过比较导入前后的节点数量和属性值来验证数据的一致性。"}
{"id": "TEST1-238", "output_field": "“1” "}
{"id": "TEST1-239", "output_field": "TuGraph Explorer 的功能可以在 TuGraph Browser 中找到。"}
{"id": "TEST1-240", "output_field": "返回状态码“200”。"}
{"id": "TEST1-241", "output_field": "TuGraph支持混合检索，包括vector和知识图谱。"}
{"id": "TEST1-242", "output_field": "改善系统性能，减少服务器刚开始时频繁 IO 操作导致的性能下降。"}
{"id": "TEST1-243", "output_field": "\"源顶点ID。\""}
{"id": "TEST1-244", "output_field": "`OPTIONAL MATCH`用于在查询中匹配图模式，如果未命中，则返回`null`。"}
{"id": "TEST1-245", "output_field": "GraphDB 实例无法使用的情况可能包括：主机及过半数的节点同时宕机，导致无法选举出新的 leader 提供服务。"}
{"id": "TEST1-246", "output_field": "liblgraph.so"}
{"id": "TEST1-247", "output_field": "只有当 `GetNumOutEdges` 函数触发限制时，它会返回受限制的出边数量。在TuGraph上没有具体的类似方法描述getNumOutEdges，所以可以假定问题中是指函数 `OutEdges(size_t vid)`。如果有出边限制，只会返回限制范围内的出边集合。"}
{"id": "TEST1-248", "output_field": "在每次迭代中，活跃顶点数量通过一种批处理函数 `ProcessVertexActive` 更新，该函数返回当前迭代活跃顶点的数量，并作为 `num_activations` 的新值。通过累加 `num_activations` 来更新总的发现节点数量 `discovered_vertices`。"}
{"id": "TEST1-249", "output_field": "64字节。"}
{"id": "TEST1-250", "output_field": "- 修改角色的 HTTP 方法是 PUT。\n- 启用角色的 HTTP 方法是 POST。"}
