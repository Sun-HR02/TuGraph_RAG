Q,K1,K2,K3,K4,K5,K6,K7,K8,K9,K10
在添加边时，如果指定的值不包含在value_dict中将如何处理？,空,空,空,空,空,空,空,空,空,空
在使用LIMIT子句时，如果查询数据库中前两个人的名字，返回的名字是什么？,"page_content='ISO GQL

2.Clauses

2.8.LIMIT

`LIMIT`限制结果行数。  
#### 使用LIMIT  
```
MATCH (n:Person)
RETURN n.name LIMIT 2;
```  
返回结果
```JSON
[{""n.name"":""Christopher Nolan""},{""n.name"":""Corin Redgrave""}]
```' metadata={'Header 1': 'ISO GQL', 'Header 2': '2.Clauses', 'Header 3': '2.8.LIMIT'}","page_content='Cypher API

2.Clauses

2.6.LIMIT

- ✓ Return a subset of the records  
```
MATCH (n:person)
RETURN n.name
LIMIT 3
```  
- ❏ Using an expression with LIMIT to return a subset of the records  
```
MATCH (n:person)
RETURN n.name
LIMIT toInteger(3 * rand())+ 1
```' metadata={'Header 1': 'Cypher API', 'Header 2': '2.Clauses', 'Header 3': '2.6.LIMIT'}","page_content='Cypher API

2.Clauses

2.5.SKIP

- ✓ Skip first three records  
```
MATCH (n:person)
RETURN n.name
ORDER BY n.name
SKIP 3
```  
- ✓ Return middle two records  
```
MATCH (n:person)
RETURN n.name
ORDER BY n.name
SKIP 1
LIMIT 2
```  
- ❏ Using an expression with SKIP to return a subset of the records  
```
MATCH (n:person)
RETURN n.name
ORDER BY n.name
SKIP toInteger(3*rand())+ 1
```' metadata={'Header 1': 'Cypher API', 'Header 2': '2.Clauses', 'Header 3': '2.5.SKIP'}","page_content='ISO GQL

2.Clauses

2.7.SKIP

`SKIP`指定结果偏移行数。  
#### 未使用SKIP  
```
MATCH (n:Person)
RETURN n.name LIMIT 3
```  
返回结果  
```JSON
[{""n.name"":""Christopher Nolan""},{""n.name"":""Corin Redgrave""},{""n.name"":""Dennis Quaid""}]
```  
#### 使用SKIP  
```
MATCH (n:Person)
RETURN n.name SKIP 1 LIMIT 2
```  
返回结果
```JSON
[{""n.name"":""Corin Redgrave""},{""n.name"":""Dennis Quaid""}]
```' metadata={'Header 1': 'ISO GQL', 'Header 2': '2.Clauses', 'Header 3': '2.7.SKIP'}",空,空,空,空,空,空
如何查询数据库中现有角色及其相关信息？,"page_content='RESTful API Legacy

6.Deprecated

6.2.角色管理

列出数据库的所有角色。只有管理员拥有该操作权限。  
- **URI**: `/role/`
- **METHOD**: GET
- **RESPONSE**: 所有角色及其信息。  
**Example request.**  
```
• GET http://localhost:7070/role
• Accept: application/json; charset=UTF-8
• Content-Type: application/json; charset=UTF-8
• Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhZG1pbiI6dHJ1ZSwiaXNzIjoiZm1hLmFpIiwidXNlcl9pZCI6ImFkbWluIn0.SHaqrjKLaI4byjbEYVAH4D88dOTD_zYQ_uAvdizTMek
```  
**Example response.**  
```
• 200: OK
Output:
{
""admin"": {' metadata={'Header 1': 'RESTful API Legacy', 'Header 2': '6.Deprecated', 'Header 3': '6.2.角色管理'}","page_content='可视化操作手册

2.操作指南

2.5.控制台

`控制台`提供可视化的的账户管理和数据库信息查看功能，它为用户提供了全面的账户和角色管理功能，包括账户的增删改查以及禁用，角色的增删改查以及禁用。此外，它也为用户提供了便捷的数据库信息查看功能，让用户可以轻松地查看图数据库的基础信息和配置信息。其中，基础信息主要包括版本号、运行时间、CPP编译版本号等，而数据库配置信息则包括端口号、系统功能参数配置等。  
#### 2.5.1.账户管理  
##### 2.5.1.1.账户管理  
###### a.添加账户  
在`账户管理`界面点击`添加`按钮创建新的账户，用户需要输入账户名称、账户描述、账户密码以及相关角色。  
![账户管理-添加账户按钮](../../../images/browser/account-add-button.png)  
- 账户名称：支持中文、字母、数字以及下划线，不支持空格以及其他特殊符号。
- 相关角色：新建账户时必须要选择一个角色，在账户添加成功后，系统会自动生成一个与账户名称一样的角色。' metadata={'Header 1': '可视化操作手册', 'Header 2': '2.操作指南', 'Header 3': '2.5.控制台'}","page_content='部署高可用模式

9.查看服务器状态

备份组的当前状态可以在 TuGraph 可视化工具、REST API 以及 Cypher 查询中获取。  
在 TuGraph 可视化工具中，可以在 DBInfo 部分中找到备份组中的服务器及其角色列表。  
使用 REST API 时，可以使用`GET /info/peers` 请求获取信息。  
在 Cypher 中，使用`CALL dbms.listServers()`语句来查询当前备份组的状态信息。' metadata={'Header 1': '部署高可用模式', 'Header 2': '9.查看服务器状态'}","page_content='RESTful API Legacy

6.Deprecated

6.2.角色管理

}
```  
**Example response.**  
```
• 200: OK
```  
#### 6.2.3.列出所有角色  
列出数据库的所有角色。只有管理员拥有该操作权限。  
- **URI**: `/role/`
- **METHOD**: GET
- **RESPONSE**: 所有角色及其信息。  
**Example request.**  
```
• GET http://localhost:7070/role
• Accept: application/json; charset=UTF-8
• Content-Type: application/json; charset=UTF-8' metadata={'Header 1': 'RESTful API Legacy', 'Header 2': '6.Deprecated', 'Header 3': '6.2.角色管理'}","page_content='RESTful API Legacy

6.Deprecated

6.2.角色管理

• Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhZG1pbiI6dHJ1ZSwiaXNzIjoiZm1hLmFpIiwidXNlcl9pZCI6ImFkbWluIn0.SHaqrjKLaI4byjbEYVAH4D88dOTD_zYQ_uAvdizTMek
Input:
{
""description"": ""modified description""
}
```  
**Example response.**  
```
• 200: OK
```  
#### 6.2.3.列出所有角色  
列出数据库的所有角色。只有管理员拥有该操作权限。  
- **URI**: `/role/`
- **METHOD**: GET
- **RESPONSE**: 所有角色及其信息。  
**Example request.**  
```
• GET http://localhost:7070/role' metadata={'Header 1': 'RESTful API Legacy', 'Header 2': '6.Deprecated', 'Header 3': '6.2.角色管理'}",空,空,空,空,空
tugraph可以最多创建多少点边和点边上最多创建多少属性？,"page_content='TuGraph图模型说明

1. 数据模型

1.1. 图模型

- 上限：每个图项目存储最多2^(40)个点数据。
- 边：用于表达点与点之间的关系，如演员出演电影。
- 有向边：边为有向边。若要模拟无向边，用户可以创建两个方向相反的边。
- 多条边：两个点数据之间可以有多条边数据。当前TuGraph支持重复边，如要确保边边唯一，需要通过业务策略实现。
- 上限：两个点数据之间存储最多2^(32)条边数据。
- 属性图：点和边可以具有与其关联的属性，每个属性可以有不同的类型。
- 强类型：每个点和边有且仅有一个标签，创建标签后，修改属性数量及类型有代价。
- 指定边的起/终点类型：可限制边的起点和终点点类型，支持同类型边的起点和终点的点类型不同，如个人转账给公司、公司转账给公司；当指定边的起/终点类型后，可增加多组起/终点类型，不可删除已限制的起/终点类型。
- 无限制模式：支持不指定边的起点和终点的点类型，任意两个点类型间均可创建该类型的边数据。注：当指定边的起/终点类型后无法再采用无限制模式。' metadata={'Header 1': 'TuGraph图模型说明', 'Header 2': '1. 数据模型', 'Header 3': '1.1. 图模型'}","page_content='TuGraph图模型说明

1. 数据模型

1.1. 图模型

TuGraph是一个具备多图能力的强类型、有向属性图数据库。  
- 图项目：每个数据库服务可以承载多个图项目（多图），每个图项目可以有自己的访问控制配置，数据库管理员可以创建或删除指定图项目。
- 点：指实体，一般用于表达现实中的实体对象，如一部电影、一个演员。
- 主键：用户自定义的点数据主键，默认唯一索引，在对应的点类型中唯一。
- VID：点在存储层自动分配图项目中的唯一ID，用户不可修改。
- 上限：每个图项目存储最多2^(40)个点数据。
- 边：用于表达点与点之间的关系，如演员出演电影。
- 有向边：边为有向边。若要模拟无向边，用户可以创建两个方向相反的边。
- 多条边：两个点数据之间可以有多条边数据。当前TuGraph支持重复边，如要确保边边唯一，需要通过业务策略实现。
- 上限：两个点数据之间存储最多2^(32)条边数据。
- 属性图：点和边可以具有与其关联的属性，每个属性可以有不同的类型。
- 强类型：每个点和边有且仅有一个标签，创建标签后，修改属性数量及类型有代价。' metadata={'Header 1': 'TuGraph图模型说明', 'Header 2': '1. 数据模型', 'Header 3': '1.1. 图模型'}","page_content='TuGraph图模型说明

2. 图项目、点、边、属性命名规则和建议

2.2 使用限制

|**描述**|**最大个数**|
|-------- |--------- |
|用户数、角色数|65536|
|图项目的个数|4096|
|每个图项目的点和边类型数量之和|4096|
|每个点或边类型的属性数量|1024|  
注：
1、特殊字符和关键字说明：使用特殊字符或非保留关键字时，需要使用反单引号/backquote（``）进行引用；  
示例： ```match (`match`:match) return `match`.id limit 1```  
2、大小写敏感性：TuGraph大小写敏感；  
3、图项目、点/边、属性名称之间可以重复使用，同一点或边下的属性名称不可以重复；  
4、属性名字保留关键字：SRC_ID / DST_ID / SKIP' metadata={'Header 1': 'TuGraph图模型说明', 'Header 2': '2. 图项目、点、边、属性命名规则和建议', 'Header 3': '2.2 使用限制'}","page_content='TuGraph图模型说明

1. 数据模型

1.3. 索引

TuGraph支持对点或边的属性创建索引，以提升查询效率。其特点如下：
- 索引包括普通索引和组合索引，普通索引基于一个点或边的一个属性创建，而组合索引基于一个点或边的多个属性创建（不超过16个），可以对同一点或边的多个（组）属性创建索引。
- 如果为点标签创建了唯一索引，在修改该标签的点时，会先执行数据完整性检查，以确保该索引的唯一性。
- BLOB类型的属性不能建立索引。  
TuGraph的点边均有多种索引类型，不同的索引类型的功能和限制不同，具体如下：  
#### 1.3.1 普通索引
##### 1.3.1.1 点索引
###### 1.3.1.1.1 unique索引  
点的unique索引指的是全局唯一的索引，即若一个属性设置了unique索引，在同一个图中，相同label的点的该属性不会存在相同的值，
unique索引key的最大长度是480bytes，**超过480bytes的属性不能建立unique索引**。
primary作为特殊的unique索引，因此最大key的长度也是480bytes。' metadata={'Header 1': 'TuGraph图模型说明', 'Header 2': '1. 数据模型', 'Header 3': '1.3. 索引'}","page_content='TuGraph图模型说明

2. 图项目、点、边、属性命名规则和建议

2.1 命名规则

图项目、点、边和属性是识别符。该节描述了在TuGraph中识别符的允许的语法。
下面的表描述了每类识别符的最大长度和允许的字符。  
|**识别符** |**长度** |**允许的字符**|
|---------  |---------  |---------  |
|用户、角色、图项目|1-64字符|允许中文、字母、数字、下划线，且首字符不为数字|
|点类型、边类型、属性|1~256字符|允许中文、字母、数字、下划线，且首字符不为数字|' metadata={'Header 1': 'TuGraph图模型说明', 'Header 2': '2. 图项目、点、边、属性命名规则和建议', 'Header 3': '2.1 命名规则'}","page_content='TuGraph图模型说明

1. 数据模型

1.3. 索引

和点类似，边的non_unique索引指的是非全局唯一的索引，即若一个属性设置了non_unique索引，
在同一个图中，相同label的边的该属性可以存在相同的值。
由于non_unique索引一个key可能映射到多个值，为了加速查找和写入，
在用户指定的key后面加上了索引key相同的一组eid的最大值。
每个eid是24bytes长度，因此non_unique索引key最大长度是456bytes。
但是，不同于unique索引，超过456bytes也可以建立non_unique索引。
只不过在对这样的属性建立索引时会只截取**前456bytes**作为索引key（属性本身存储的值不受影响）。
并且，在通过迭代器遍历时，也是先自动截取查询值的前456bytes再进行遍历，
所以结果可能和预期不一致，需要用户再过滤。  
#### 1.3.2 组合索引  
目前只支持对点的多个属性建立组合索引，不支持对边的属性建立组合索引。组合索引支持唯一索引和非唯一索引两种类型，建立索引的要求如下：
1. 建立组合索引的属性个数在2到16个之间（含）' metadata={'Header 1': 'TuGraph图模型说明', 'Header 2': '1. 数据模型', 'Header 3': '1.3. 索引'}","page_content='TuGraph图模型说明

1. 数据模型

1.3. 索引

1. 建立组合索引的属性个数在2到16个之间（含）
2. 唯一组合索引的属性长度之和不能超过480-2*(属性个数-1)字节，非唯一组合索引的属性长度之和不能超过475-2*(属性个数-1)字节  
##### 1.3.2.1 唯一索引  
和点的普通唯一索引类似，点的组合唯一索引指的是全局唯一的索引，即若一组属性设置了unique索引，
在同一个图中，相同label的点的该组属性不会存在相同的值。
由于底层存储设计，组合索引key需要保存属性的长度，因此，
组合唯一索引key的最大长度是480-2*(属性个数-1) bytes，**超过的属性不能建立唯一索引**。  
##### 1.3.2.2 非唯一索引  
和点的普通非唯一索引类似，点的非唯一索引指的是非全局唯一的索引，即若一组属性设置了非唯一索引，
在同一个图中，相同label的点的该组属性可以存在相同的值。
由于非唯一索引一个key可能映射到多个值，为了加速查找和写入，
在用户指定的key后面加上了索引key相同的一组vid的最大值。' metadata={'Header 1': 'TuGraph图模型说明', 'Header 2': '1. 数据模型', 'Header 3': '1.3. 索引'}",空,空,空
我下载了4.3.2镜像，启动成功了，进入容器后没有 setup.sh 脚本是改变目录了吗？,空,空,空,空,空,空,空,空,空,空
lgraph_server -d start的方式启动，不是会在pwd路径下生成pid文件吗？这个pid文件有参数能控制路径吗？,"page_content='数据库运行

3.服务操作

3.1.启动服务

TuGraph 需要通过 `lgraph_server -d start` 命令行启动，启动命令示例如下：  
```bash
$ ./lgraph_server -d start -c lgraph.json
Starting lgraph...
The service process is started at pid 12109.
```  
此命令启动的 TuGraph 服务器进程为守护进程，它将从文件`lgraph.json`加载相关配置。服务器启动后，它将开始在日志文件中打印日志，之后可用该日志文件确定服务器的状态。' metadata={'Header 1': '数据库运行', 'Header 2': '3.服务操作', 'Header 3': '3.1.启动服务'}","page_content='数据库运行

2.运行模式

2.2.运行进程守护模式

启动命令：  
```shell
$ ./lgraph_server -d start -c lgraph.json
```  
守护模式的运行输出示例：  
```shell
Starting lgraph...
The service process is started at pid 12109.
```  
此命令启动的 TuGraph 服务器进程为守护进程，它将从文件`lgraph.json`加载相关配置。服务器启动后，它将开始在日志文件中打印日志，之后可用该日志文件确定服务器的状态。' metadata={'Header 1': '数据库运行', 'Header 2': '2.运行模式', 'Header 3': '2.2.运行进程守护模式'}","page_content='数据迁移

3. 升级迁移

3.3. 启动新服务

使用如下命令启动新服务
```bash
lgraph_server -c /usr/local/etc/lgraph.json --directory db.export -d start
```' metadata={'Header 1': '数据迁移', 'Header 2': '3. 升级迁移', 'Header 3': '3.3. 启动新服务'}","page_content='数据库运行

3.服务操作

3.2.停止服务

用户可以使用`kill`命令以及`lgraph_server -d stop`命令停止 TuGraph 守护进程。由于可能在同一台计算机上运行多个 TuGraph 服务器进程，因此我们使用`.pid`文件区分不同的服务器进程，该文件写入启动该进程的工作目录。因此，需要在相同工作目录中运行`lgraph_server-d stop`命令，以停止正确的服务器进程。  
```shell
user@host:~/tugraph$ ./lgraph_server -d start -c lgraph.json
20200508122306.378: Starting lgraph...
20200508122306.379: The service process is started at pid 93.

user@host:~/tugraph$ cat ./lgraph.pid
93' metadata={'Header 1': '数据库运行', 'Header 2': '3.服务操作', 'Header 3': '3.2.停止服务'}","page_content='数据库运行

3.服务操作

3.3.重启服务

用户也可以通过`lgraph_server -d restart`来重启 TuGraph 服务：  
```bash
$ ./lgraph_server -d restart
Stopping lgraph...
Process stopped.
Starting lgraph...
The service process is started at pid 20899.
```' metadata={'Header 1': '数据库运行', 'Header 2': '3.服务操作', 'Header 3': '3.3.重启服务'}","page_content='数据迁移

2. 兼容迁移

2.2. 启动新服务

使用如下命令启动新服务，存储过程会自动加载到新服务中
```bash
lgraph_server -c /usr/local/etc/lgraph.json --directory db.bck -d start
```' metadata={'Header 1': '数据迁移', 'Header 2': '2. 兼容迁移', 'Header 3': '2.2. 启动新服务'}","page_content='数据迁移

4. 在线迁移

4.2. 启动新节点

使用如下命令将新节点加入集群，加入集群后，增量数据自动同步到新节点
```bash
lgraph_server -c /usr/local/etc/lgraph_ha.json --directory db.cp --ha_conf 192.168.0.1:9090,192.168.0.2:9090,192.168.0.3:9090 -d start
```' metadata={'Header 1': '数据迁移', 'Header 2': '4. 在线迁移', 'Header 3': '4.2. 启动新节点'}","page_content='集成测试

2.TuGraph集成测试框架

2.2.组件用法

#### 2.2.1.server  
##### 2.2.1.1.启动参数
采用python字典传入
+ cmd是启动命令
+ cleanup_dir是执行完成后需要清理的目录，可以是多个，通过python列表传入  
```python
SERVEROPT = {""cmd"":""./lgraph_server -c lgraph_standalone.json --directory ./testdb --license _FMA_IGNORE_LICENSE_CHECK_SALTED_ --port 7072 --rpc_port 9092"",
""cleanup_dir"":[""./testdb""]}
```  
##### 2.2.1.2.启动命令
通过fixtures组件引入工具，并通过启动参数来控制不同的处理逻辑，函数开始执行前会启动server，函数执行完成后会停止server，并清理cleanup_dir指定的目录  
```python' metadata={'Header 1': '集成测试', 'Header 2': '2.TuGraph集成测试框架', 'Header 3': '2.2.组件用法'}","page_content='数据库运行

2.运行模式

2.1.运行普通进程

`lgraph_server -d run`命令可以将 TuGraph 作为普通进程运行。普通进程依赖命令行终端，因此终端结束时，TuGraph 进程也会自动终止。普通进程模式配合`--log_dir """"`可以将进程日志直接输出到终端，因此更方便调试。注：当不使用`-d run`命令时，将默认运行普通进程。  
lgraph_server的默认路径为：/usr/local/bin/lgraph_server 。  
lgraph.json的默认路径为：/usr/local/etc/lgraph.json 。  
启动命令：  
```shell
$ ./lgraph_server -d run -c lgraph.json --log_dir """"
```
或者：
```shell
$ ./lgraph_server -c lgraph.json --log_dir """"
```  
普通模式的运行输出示例：  
```shell' metadata={'Header 1': '数据库运行', 'Header 2': '2.运行模式', 'Header 3': '2.1.运行普通进程'}","page_content='集成测试

2.TuGraph集成测试框架

2.2.组件用法

##### 2.2.5.2.启动命令  
通过fixtures组件引入工具，并通过启动参数来控制备份不同的binlog，函数开始执行前会拷贝binlog到指定的目录，函数执行完成后会清理cleanup_dir指定的目录  
```python
@pytest.mark.parametrize(""backup_binlog"", [BINLOGOPT], indirect=True)
def test_backup_binlog(self, backup_binlog):
pass
```  
#### 2.2.6.backup_copy_dir  
##### 2.2.6.1.启动参数
采用python字典传入
+ cmd是启动命令
+ cleanup_dir是执行完成后需要清理的目录，可以是多个，通过python列表传入  
```python
BACKUPOPT = {""cmd"" : ""./lgraph_backup --src ./testdb -dst ./testdb1"",
""cleanup_dir"":[]}
```' metadata={'Header 1': '集成测试', 'Header 2': '2.TuGraph集成测试框架', 'Header 3': '2.2.组件用法'}"
如果在使用ARM机器（如M1芯片的Mac）编译TuGraph，应该如何修改cmake命令？,"page_content='从源码编译

2.编译介绍

以下是编译TuGraph的步骤：  
1. 如果需要web接口运行`deps/build_deps.sh`，不需要web接口则跳过此步骤
2. 根据容器系统信息执行`cmake .. -DOURSYSTEM=centos`或者`cmake .. -DOURSYSTEM=ubuntu`，如果在arm机器编译（如M1芯片的Mac中，需要加上` -DENABLE_BUILD_ON_AARCH64=ON`）
3. `make`
4. `make package` 或者 `cpack --config CPackConfig.cmake`  
示例：`tugraph/tugraph-compile-centos7`Docker环境  
```bash
$ git clone --recursive https://github.com/TuGraph-family/tugraph-db.git
$ cd tugraph-db
$ deps/build_deps.sh
$ mkdir build && cd build' metadata={'Header 1': '从源码编译', 'Header 2': '2.编译介绍'}","page_content='demo/TuGraph-Demo.md/ # TuGraph 示例

## 1 简介

TuGraph 是蚂蚁集团自主研发的大规模图计算系统，提供图数据库引擎和图分析引擎。其主要特点是大数据量存储和计算，高吞吐率，以及灵活的 API，同时支持高效的在线事务处理（OLTP）和在线分析处理（OLAP）。 LightGraph、GeaGraph是TuGraph的曾用名。

主要功能特征包括：

- 支持属性图模型
- 原生图存储及处理
- 完全的ACID事务支持
- 支持OpenCypher图查询语言
- 支持原生的Core API和Traversal API
- 支持REST和RPC接口
- 支持CSV、JSON、MySQL等多数据源导入导出
- 支持可视化图交互
- 支持命令行交互
- 内置用户权限控制、操作审计
- 支持任务和日志的监控管理
- 原生适配PandaGraph图分析引擎
- 集成DGL图神经网络系统

性能及可扩展性特征包括：

- 支持TB级大容量
- 吞吐率高达千万顶点每秒
- 面向读优化的存储引擎
- 支持高可用模式
- 支持离线备份恢复
- 在线热备份
- 高性能批量导入导出

## 2 快速上手

见QuickStart文档。

## 3 基本功能

### 3.1 RPC Client
#### 3.1.1 概述
RPC Client是对cpp语言rpc客户端的简单封装，每次执行时会创建一条到lgraph_server的链接用于发送请求数据以及接收响应结果，执行完毕后进程退出前会断开链接
#### 3.1.2 编译
在代码目录demo/CppRpcClientDemo目录下,执行下列命令 ,成功后将会看到可执行文件clientdemo
```bash
mkdir build && cd build && cmake ../ && make
```
#### 3.1.3 运行
先启动lgraph_server，确保rpc端口处于打开状态。

clientdemo程序接收参数如下：
        -h             show this usage
        -i --ip        ip for graph server
        -p --port      port for graph server
        -g --graph     graph name
        -u --user      user name
        --password     user password
        -c --cypher    cypher to query
举例如下
```bash
./clientdemo -i 127.0.0.1 -p 9090 -u admin --password 73@TuGraph -g default -c ""MATCH (n) RETURN n LIMIT 100""
```
### 3.2 Python RPC Client
#### 3.2.1 概述
Python RPC Client是对python语言rpc客户端的简单封装，每次执行时会创建一条到lgraph_server的链接用于发送请求数据以及接收响应结果，执行完毕后进程退出前会断开链接
#### 3.2.2 运行
需要依赖编译生成的python_client.so库，将python_client.so与client_python.py放在同一目录下
先启动lgraph_server，确保rpc端口处于打开状态。

clientdemo程序接收参数如下：
-h             show this usage
-i --ip        ip for graph server
-p --port      port for graph server
-g --graph     graph name
-u --user      user name
--password     user password
-c --cypher    cypher to query
举例如下
```bash
python3 client_python.py -i 127.0.0.1 -p 9090 -u admin --password 73@TuGraph -g default -c ""MATCH (n) RETURN n LIMIT 100""
```
## 4 集成工具

### 4.1 DataX 导入导出工具
#### 4.1.1 概述
DataX 支持 TuGraph 和 MySQL、SQL Server、Oracle、PostgreSQL、HDFS、Hive、HBase、OTS、ODPS、Kafka 等各种异构数据源的数据导入导出。
#### 4.' metadata={'file_name': 'TuGraph-Demo.md', 'file_path': 'demo/TuGraph-Demo.md', 'url': 'https://github.com/Sun-HR02/tugraph-db/blob/master/demo/TuGraph-Demo.md'}","page_content='TuGraph-db

3. 从源代码编译

建议在Linux系统中构建TuGraph，Docker环境是个不错的选择。如果您想设置一个新的环境，请参考[Dockerfile]  
以下是编译TuGraph的步骤：  
1. 如果需要web接口运行`deps/build_deps.sh`，不需要web接口则跳过此步骤
2. 根据容器系统信息执行`cmake .. -DOURSYSTEM=centos`或者`cmake .. -DOURSYSTEM=ubuntu`
3. `make`
4. `make package` 或者 `cpack --config CPackConfig.cmake`  
示例：`tugraph/tugraph-compile-centos7`Docker环境  
```bash
$ git clone --recursive https://github.com/TuGraph-family/tugraph-db.git
$ cd tugraph-db
$ deps/build_deps.sh
$ mkdir build && cd build' metadata={'Header 1': 'TuGraph-db', 'Header 2': '3. 从源代码编译'}",空,空,空,空,空,空,空
